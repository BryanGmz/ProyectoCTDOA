
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 23:35:03 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.java;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 23:35:03 CST 2020
  */
public class SintacticoJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoJava() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\002\003\000\002\043" +
    "\006\000\002\003\007\000\002\003\006\000\002\003\004" +
    "\000\002\004\004\000\002\004\002\000\002\014\010\000" +
    "\002\101\005\000\002\104\004\000\002\104\002\000\002" +
    "\105\005\000\002\105\004\000\002\105\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\006\004" +
    "\000\002\006\002\000\002\007\004\000\002\010\002\000" +
    "\002\010\003\000\002\010\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\003\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\005\000\002\017\004\000\002\017\004\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\027\003\000\002" +
    "\030\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\003\000\002\025\006\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\032\006\000\002\032\006\000\002\031\004\000\002" +
    "\034\004\000\002\035\003\000\002\035\003\000\002\037" +
    "\003\000\002\037\004\000\002\036\004\000\002\036\005" +
    "\000\002\051\005\000\002\040\005\000\002\041\003\000" +
    "\002\041\003\000\002\042\004\000\002\042\004\000\002" +
    "\042\004\000\002\013\005\000\002\013\004\000\002\045" +
    "\003\000\002\046\007\000\002\044\005\000\002\050\004" +
    "\000\002\047\012\000\002\054\006\000\002\055\005\000" +
    "\002\056\006\000\002\052\005\000\002\053\005\000\002" +
    "\053\006\000\002\064\007\000\002\065\007\000\002\066" +
    "\004\000\002\057\005\000\002\060\005\000\002\061\005" +
    "\000\002\062\004\000\002\062\002\000\002\063\004\000" +
    "\002\063\005\000\002\067\007\000\002\070\006\000\002" +
    "\071\007\000\002\071\002\000\002\072\003\000\002\072" +
    "\004\000\002\074\005\000\002\073\006\000\002\073\004" +
    "\000\002\033\011\000\002\075\005\000\002\076\004\000" +
    "\002\076\005\000\002\076\002\000\002\077\005\000\002" +
    "\077\006\000\002\011\011\000\002\100\005\000\002\103" +
    "\004\000\002\103\004\000\002\103\004\000\002\103\004" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\004\000\002" +
    "\103\010\000\002\103\004\000\002\103\004\000\002\102" +
    "\004\000\002\102\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\010\002\ufffa\003\005\047\007\001\002\000" +
    "\004\002\000\001\002\000\004\057\u0123\001\002\000\010" +
    "\002\ufffa\003\005\047\007\001\002\000\004\051\u011f\001" +
    "\002\000\016\003\ufff6\011\ufff6\012\ufff6\013\ufff6\047\ufff6" +
    "\057\ufff6\001\002\000\004\002\012\001\002\000\004\002" +
    "\001\001\002\000\016\003\025\011\014\012\033\013\032" +
    "\047\015\057\uffee\001\002\000\004\070\uffe9\001\002\000" +
    "\014\011\014\012\033\013\032\050\374\070\u0118\001\002" +
    "\000\010\003\ufff1\047\ufff1\057\ufff1\001\002\000\010\003" +
    "\ufff2\047\ufff2\057\ufff2\001\002\000\016\003\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\047\ufff7\057\ufff7\001\002\000\004\054" +
    "\u0117\001\002\000\046\003\056\006\035\007\051\011\014" +
    "\012\033\013\032\034\071\035\077\037\044\040\050\043" +
    "\062\045\055\057\uff7c\062\074\063\045\064\067\065\057" +
    "\070\052\001\002\000\010\003\370\047\371\057\uffee\001" +
    "\002\000\004\057\u0112\001\002\000\006\054\243\057\u0110" +
    "\001\002\000\004\070\353\001\002\000\010\003\370\047" +
    "\371\057\uffee\001\002\000\046\003\056\006\035\007\051" +
    "\011\014\012\033\013\032\034\071\035\077\037\044\040" +
    "\050\043\062\045\055\057\uff7c\062\074\063\045\064\067" +
    "\065\057\070\052\001\002\000\046\003\056\006\035\007" +
    "\051\011\014\012\033\013\032\034\071\035\077\037\044" +
    "\040\050\043\062\045\055\057\uff7c\062\074\063\045\064" +
    "\067\065\057\070\052\001\002\000\004\070\uffe7\001\002" +
    "\000\004\070\uffe8\001\002\000\004\070\353\001\002\000" +
    "\004\060\350\001\002\000\046\003\056\006\035\007\051" +
    "\011\014\012\033\013\032\034\071\035\077\037\044\040" +
    "\050\043\062\045\055\057\uff7c\062\074\063\045\064\067" +
    "\065\057\070\052\001\002\000\054\003\uff82\006\uff82\007" +
    "\uff82\011\uff82\012\uff82\013\uff82\034\uff82\035\uff82\036\uff82" +
    "\037\uff82\040\uff82\043\uff82\044\uff82\045\uff82\046\uff82\057" +
    "\uff82\062\uff82\063\uff82\064\uff82\065\uff82\070\uff82\001\002" +
    "\000\004\054\345\001\002\000\004\070\335\001\002\000" +
    "\004\046\317\001\002\000\046\003\056\006\035\007\051" +
    "\011\014\012\033\013\032\034\071\035\077\037\044\040" +
    "\050\043\062\045\055\057\uff7c\062\074\063\045\064\067" +
    "\065\057\070\052\001\002\000\004\060\273\001\002\000" +
    "\004\060\103\001\002\000\004\054\271\001\002\000\004" +
    "\054\270\001\002\000\004\060\264\001\002\000\004\010" +
    "\257\001\002\000\004\021\253\001\002\000\004\057\252" +
    "\001\002\000\004\054\251\001\002\000\020\005\225\015" +
    "\111\054\uffec\060\124\066\115\067\120\070\117\001\002" +
    "\000\006\054\246\057\247\001\002\000\004\060\232\001" +
    "\002\000\046\003\056\006\035\007\051\011\014\012\033" +
    "\013\032\034\071\035\077\037\044\040\050\043\062\045" +
    "\055\057\uff7c\062\074\063\045\064\067\065\057\070\052" +
    "\001\002\000\054\003\uff83\006\uff83\007\uff83\011\uff83\012" +
    "\uff83\013\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\057\uff83\062\uff83\063" +
    "\uff83\064\uff83\065\uff83\070\uff83\001\002\000\004\060\222" +
    "\001\002\000\054\003\uff86\006\uff86\007\uff86\011\uff86\012" +
    "\uff86\013\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\043\uff86\044\uff86\045\uff86\046\uff86\057\uff86\062\uff86\063" +
    "\uff86\064\uff86\065\uff86\070\uff86\001\002\000\060\003\uff9f" +
    "\006\uff9f\007\uff9f\011\uff9f\012\uff9f\013\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\202\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\057\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\070\uff9f\001\002\000\046\003\056\006\035" +
    "\007\051\011\014\012\033\013\032\034\071\035\077\037" +
    "\044\040\050\043\062\045\055\057\uff7c\062\074\063\045" +
    "\064\067\065\057\070\052\001\002\000\004\060\173\001" +
    "\002\000\004\060\103\001\002\000\054\003\uff84\006\uff84" +
    "\007\uff84\011\uff84\012\uff84\013\uff84\034\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\057\uff84\062\uff84\063\uff84\064\uff84\065\uff84\070\uff84\001" +
    "\002\000\004\060\uffb1\001\002\000\054\003\uff85\006\uff85" +
    "\007\uff85\011\uff85\012\uff85\013\uff85\034\uff85\035\uff85\036" +
    "\uff85\037\uff85\040\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\057\uff85\062\uff85\063\uff85\064\uff85\065\uff85\070\uff85\001" +
    "\002\000\020\005\126\015\111\031\123\060\124\066\115" +
    "\067\120\070\117\001\002\000\004\060\103\001\002\000" +
    "\004\054\102\001\002\000\054\003\056\006\035\007\051" +
    "\011\014\012\033\013\032\034\071\035\077\036\uff7c\037" +
    "\044\040\050\043\062\044\uff7c\045\055\046\uff7c\057\uff7c" +
    "\062\074\063\045\064\067\065\057\070\052\001\002\000" +
    "\004\056\100\001\002\000\046\003\uffae\006\uffae\007\uffae" +
    "\011\uffae\012\uffae\013\uffae\034\uffae\035\uffae\037\uffae\040" +
    "\uffae\043\uffae\045\uffae\057\uffae\062\uffae\063\uffae\064\uffae" +
    "\065\uffae\070\uffae\001\002\000\012\036\uff7d\044\uff7d\046" +
    "\uff7d\057\uff7d\001\002\000\054\003\uff81\006\uff81\007\uff81" +
    "\011\uff81\012\uff81\013\uff81\034\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\043\uff81\044\uff81\045\uff81\046\uff81\057\uff81" +
    "\062\uff81\063\uff81\064\uff81\065\uff81\070\uff81\001\002\000" +
    "\006\004\106\061\105\001\002\000\006\054\uffb6\055\uffb6" +
    "\001\002\000\006\054\uffb2\055\uffb2\001\002\000\004\061" +
    "\107\001\002\000\006\054\uffb3\055\uffb3\001\002\000\004" +
    "\054\171\001\002\000\012\060\124\066\115\067\120\070" +
    "\117\001\002\000\044\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\032\uffe0\033\uffe0\054\uffe0\055\uffe0\061\uffe0" +
    "\001\002\000\010\033\166\054\uffd0\061\uffd0\001\002\000" +
    "\040\014\134\015\136\016\140\017\137\020\133\023\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\032\uffd2\033" +
    "\uffd2\054\uffd2\061\uffd2\001\002\000\044\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\054\uffdd" +
    "\055\uffdd\061\uffdd\001\002\000\012\032\uffc8\033\uffc8\054" +
    "\uffc8\061\uffc8\001\002\000\044\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\032\uffde\033\uffde\054\uffde\055\uffde" +
    "\061\uffde\001\002\000\044\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\027\uffdc\030\uffdc\032\uffdc\033\uffdc\054\uffdc\055\uffdc\061" +
    "\uffdc\001\002\000\012\032\uffca\033\uffca\054\uffca\061\uffca" +
    "\001\002\000\016\023\151\024\152\025\153\026\155\027" +
    "\154\030\156\001\002\000\004\060\146\001\002\000\014" +
    "\015\111\060\124\066\115\067\120\070\117\001\002\000" +
    "\012\032\127\033\uffcc\054\uffcc\061\uffcc\001\002\000\026" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\032" +
    "\uffd1\033\uffd1\054\uffd1\061\uffd1\001\002\000\020\005\uffcf" +
    "\015\uffcf\031\uffcf\060\uffcf\066\uffcf\067\uffcf\070\uffcf\001" +
    "\002\000\020\005\126\015\111\031\123\060\124\066\115" +
    "\067\120\070\117\001\002\000\012\032\127\033\uffcb\054" +
    "\uffcb\061\uffcb\001\002\000\016\014\134\015\136\016\140" +
    "\017\137\020\133\061\135\001\002\000\014\015\111\060" +
    "\124\066\115\067\120\070\117\001\002\000\014\015\111" +
    "\060\124\066\115\067\120\070\117\001\002\000\044\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\032\uffdf\033" +
    "\uffdf\054\uffdf\055\uffdf\061\uffdf\001\002\000\014\015\111" +
    "\060\124\066\115\067\120\070\117\001\002\000\014\015" +
    "\111\060\124\066\115\067\120\070\117\001\002\000\014" +
    "\015\111\060\124\066\115\067\120\070\117\001\002\000" +
    "\044\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\032" +
    "\uffe4\033\uffe4\054\uffe4\055\uffe4\061\uffe4\001\002\000\044" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\054\uffe3\055\uffe3\061\uffe3\001\002\000\044\014" +
    "\uffe5\015\uffe5\016\140\017\137\020\133\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\033" +
    "\uffe5\054\uffe5\055\uffe5\061\uffe5\001\002\000\044\014\uffe6" +
    "\015\uffe6\016\140\017\137\020\133\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\054\uffe6\055\uffe6\061\uffe6\001\002\000\044\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2\054" +
    "\uffe2\055\uffe2\061\uffe2\001\002\000\016\005\126\015\111" +
    "\060\124\066\115\067\120\070\117\001\002\000\004\061" +
    "\150\001\002\000\012\032\uffc9\033\uffc9\054\uffc9\061\uffc9" +
    "\001\002\000\016\005\126\015\111\060\124\066\115\067" +
    "\120\070\117\001\002\000\016\005\126\015\111\060\124" +
    "\066\115\067\120\070\117\001\002\000\016\005\126\015" +
    "\111\060\124\066\115\067\120\070\117\001\002\000\016" +
    "\005\126\015\111\060\124\066\115\067\120\070\117\001" +
    "\002\000\016\005\126\015\111\060\124\066\115\067\120" +
    "\070\117\001\002\000\016\005\126\015\111\060\124\066" +
    "\115\067\120\070\117\001\002\000\012\032\uffd3\033\uffd3" +
    "\054\uffd3\061\uffd3\001\002\000\012\032\uffd4\033\uffd4\054" +
    "\uffd4\061\uffd4\001\002\000\012\032\uffd5\033\uffd5\054\uffd5" +
    "\061\uffd5\001\002\000\012\032\uffd6\033\uffd6\054\uffd6\061" +
    "\uffd6\001\002\000\012\032\uffd7\033\uffd7\054\uffd7\061\uffd7" +
    "\001\002\000\012\032\uffd8\033\uffd8\054\uffd8\061\uffd8\001" +
    "\002\000\020\005\126\015\111\031\123\060\124\066\115" +
    "\067\120\070\117\001\002\000\020\005\uffce\015\uffce\031" +
    "\uffce\060\uffce\066\uffce\067\uffce\070\uffce\001\002\000\010" +
    "\033\166\054\uffcd\061\uffcd\001\002\000\044\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1\054" +
    "\uffe1\055\uffe1\061\uffe1\001\002\000\004\070\uffab\001\002" +
    "\000\006\054\uffb4\055\uffb4\001\002\000\020\005\126\015" +
    "\111\031\123\060\124\066\115\067\120\070\117\001\002" +
    "\000\004\061\175\001\002\000\004\056\176\001\002\000" +
    "\046\003\uffb0\006\uffb0\007\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\034\uffb0\035\uffb0\037\uffb0\040\uffb0\043\uffb0\045\uffb0\057" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\070\uffb0\001\002" +
    "\000\004\057\200\001\002\000\054\003\uffaf\006\uffaf\007" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\037\uffaf\040\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\057" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\070\uffaf\001\002" +
    "\000\056\003\uff9e\006\uff9e\007\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\042\215" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\057\uff9e\062\uff9e\063" +
    "\uff9e\064\uff9e\065\uff9e\070\uff9e\001\002\000\004\060\210" +
    "\001\002\000\060\003\uff9f\006\uff9f\007\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\202\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\057" +
    "\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\070\uff9f\001\002" +
    "\000\046\003\056\006\035\007\051\011\014\012\033\013" +
    "\032\034\071\035\077\037\044\040\050\043\062\045\055" +
    "\057\uff7c\062\074\063\045\064\067\065\057\070\052\001" +
    "\002\000\004\057\206\001\002\000\060\003\uffa1\006\uffa1" +
    "\007\uffa1\011\uffa1\012\uffa1\013\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\057\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\070\uffa1\001\002\000\056\003\uffa0\006\uffa0\007\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\057\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\070\uffa0\001" +
    "\002\000\020\005\126\015\111\031\123\060\124\066\115" +
    "\067\120\070\117\001\002\000\004\061\212\001\002\000" +
    "\004\056\213\001\002\000\046\003\uffa5\006\uffa5\007\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\034\uffa5\035\uffa5\037\uffa5\040" +
    "\uffa5\043\uffa5\045\uffa5\057\uffa5\062\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\070\uffa5\001\002\000\046\003\056\006\035\007" +
    "\051\011\014\012\033\013\032\034\071\035\077\037\044" +
    "\040\050\043\062\045\055\057\uff7c\062\074\063\045\064" +
    "\067\065\057\070\052\001\002\000\004\056\217\001\002" +
    "\000\054\003\uff9d\006\uff9d\007\uff9d\011\uff9d\012\uff9d\013" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\057\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\070\uff9d\001\002\000\046\003\uffa4\006\uffa4" +
    "\007\uffa4\011\uffa4\012\uffa4\013\uffa4\034\uffa4\035\uffa4\037" +
    "\uffa4\040\uffa4\043\uffa4\045\uffa4\057\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\070\uffa4\001\002\000\004\057\221\001" +
    "\002\000\054\003\uffa2\006\uffa2\007\uffa2\011\uffa2\012\uffa2" +
    "\013\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\057\uffa2\062\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\070\uffa2\001\002\000\020\005\225\015" +
    "\111\060\124\061\uffec\066\115\067\120\070\117\001\002" +
    "\000\004\061\226\001\002\000\024\014\134\015\136\016" +
    "\140\017\137\020\133\022\uffea\054\uffea\055\uffea\061\uffea" +
    "\001\002\000\012\022\uffeb\054\uffeb\055\uffeb\061\uffeb\001" +
    "\002\000\004\056\227\001\002\000\004\046\uff9c\001\002" +
    "\000\004\057\231\001\002\000\060\003\uffa3\006\uffa3\007" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\057\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\070\uffa3\001\002\000\016\003\236\004\233\011\014\012" +
    "\033\013\032\047\234\001\002\000\006\014\uffc6\061\uffc6" +
    "\001\002\000\010\011\014\012\033\013\032\001\002\000" +
    "\006\014\uffc5\061\uffc5\001\002\000\004\054\243\001\002" +
    "\000\006\014\240\061\241\001\002\000\016\003\236\004" +
    "\233\011\014\012\033\013\032\047\234\001\002\000\004" +
    "\054\uffc3\001\002\000\006\014\uffc7\061\uffc7\001\002\000" +
    "\022\003\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\047\ufff3" +
    "\057\ufff3\061\ufff3\001\002\000\004\054\245\001\002\000" +
    "\022\003\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\047\ufff5" +
    "\057\ufff5\061\ufff5\001\002\000\054\003\uff7f\006\uff7f\007" +
    "\uff7f\011\uff7f\012\uff7f\013\uff7f\034\uff7f\035\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f\057" +
    "\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\070\uff7f\001\002" +
    "\000\054\003\uff7e\006\uff7e\007\uff7e\011\uff7e\012\uff7e\013" +
    "\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\043\uff7e" +
    "\044\uff7e\045\uff7e\046\uff7e\057\uff7e\062\uff7e\063\uff7e\064" +
    "\uff7e\065\uff7e\070\uff7e\001\002\000\004\054\uffed\001\002" +
    "\000\054\003\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\057\uff87\062\uff87\063\uff87\064" +
    "\uff87\065\uff87\070\uff87\001\002\000\010\003\ufff8\047\ufff8" +
    "\057\ufff8\001\002\000\026\005\225\015\111\054\uffec\060" +
    "\124\062\074\063\045\064\067\066\115\067\120\070\117" +
    "\001\002\000\006\054\uffb8\055\uffb8\001\002\000\006\054" +
    "\uffb7\055\uffb7\001\002\000\004\054\uffb9\001\002\000\004" +
    "\070\260\001\002\000\004\021\261\001\002\000\026\005" +
    "\225\015\111\054\uffec\060\124\062\074\063\045\064\067" +
    "\066\115\067\120\070\117\001\002\000\004\054\263\001" +
    "\002\000\054\003\uff80\006\uff80\007\uff80\011\uff80\012\uff80" +
    "\013\uff80\034\uff80\035\uff80\036\uff80\037\uff80\040\uff80\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\057\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\070\uff80\001\002\000\020\005\126\015" +
    "\111\031\123\060\124\066\115\067\120\070\117\001\002" +
    "\000\004\061\266\001\002\000\004\056\267\001\002\000" +
    "\046\003\uffa6\006\uffa6\007\uffa6\011\uffa6\012\uffa6\013\uffa6" +
    "\034\uffa6\035\uffa6\037\uffa6\040\uffa6\043\uffa6\045\uffa6\057" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\070\uffa6\001\002" +
    "\000\054\003\uff88\006\uff88\007\uff88\011\uff88\012\uff88\013" +
    "\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\057\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\070\uff88\001\002\000\054\003\uff8a\006\uff8a" +
    "\007\uff8a\011\uff8a\012\uff8a\013\uff8a\034\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\057\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\070\uff8a\001" +
    "\002\000\006\054\uffb5\055\uffb5\001\002\000\012\011\014" +
    "\012\033\013\032\070\274\001\002\000\004\021\303\001" +
    "\002\000\004\054\302\001\002\000\004\070\277\001\002" +
    "\000\004\021\300\001\002\000\020\005\225\015\111\054" +
    "\uffec\060\124\066\115\067\120\070\117\001\002\000\004" +
    "\054\uffa7\001\002\000\020\005\uffac\015\uffac\031\uffac\060" +
    "\uffac\066\uffac\067\uffac\070\uffac\001\002\000\014\015\111" +
    "\060\124\066\115\067\120\070\117\001\002\000\016\014" +
    "\134\015\136\016\140\017\137\020\133\054\uffa8\001\002" +
    "\000\004\057\306\001\002\000\004\034\307\001\002\000" +
    "\004\060\310\001\002\000\020\005\126\015\111\031\123" +
    "\060\124\066\115\067\120\070\117\001\002\000\004\061" +
    "\312\001\002\000\004\054\313\001\002\000\054\003\uffad" +
    "\006\uffad\007\uffad\011\uffad\012\uffad\013\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\040\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\057\uffad\062\uffad\063\uffad\064\uffad\065\uffad\070" +
    "\uffad\001\002\000\006\044\326\057\uff99\001\002\000\054" +
    "\003\056\006\035\007\051\011\014\012\033\013\032\034" +
    "\071\035\077\036\uff7c\037\044\040\050\043\062\044\uff7c" +
    "\045\055\046\uff7c\057\uff7c\062\074\063\045\064\067\065" +
    "\057\070\052\001\002\000\010\044\uff98\046\317\057\uff98" +
    "\001\002\000\020\005\225\015\111\022\uffec\060\124\066" +
    "\115\067\120\070\117\001\002\000\004\022\321\001\002" +
    "\000\054\003\uff96\006\uff96\007\uff96\011\uff96\012\uff96\013" +
    "\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\057\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\070\uff96\001\002\000\006\044\uff97\057\uff97" +
    "\001\002\000\012\036\324\044\uff94\046\uff94\057\uff94\001" +
    "\002\000\004\054\325\001\002\000\010\044\uff95\046\uff95" +
    "\057\uff95\001\002\000\004\022\331\001\002\000\004\057" +
    "\330\001\002\000\054\003\uff9b\006\uff9b\007\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\057\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\070\uff9b\001\002\000\046\003" +
    "\056\006\035\007\051\011\014\012\033\013\032\034\071" +
    "\035\077\036\uff7c\037\044\040\050\043\062\045\055\062" +
    "\074\063\045\064\067\065\057\070\052\001\002\000\004" +
    "\036\333\001\002\000\004\054\334\001\002\000\004\057" +
    "\uff9a\001\002\000\010\021\342\052\343\053\341\001\002" +
    "\000\004\061\337\001\002\000\004\056\340\001\002\000" +
    "\046\003\uffaa\006\uffaa\007\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\034\uffaa\035\uffaa\037\uffaa\040\uffaa\043\uffaa\045\uffaa\057" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\070\uffaa\001\002" +
    "\000\004\061\uffd9\001\002\000\014\015\111\060\124\066" +
    "\115\067\120\070\117\001\002\000\004\061\uffda\001\002" +
    "\000\016\014\134\015\136\016\140\017\137\020\133\061" +
    "\uffdb\001\002\000\054\003\uff89\006\uff89\007\uff89\011\uff89" +
    "\012\uff89\013\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\057\uff89\062\uff89" +
    "\063\uff89\064\uff89\065\uff89\070\uff89\001\002\000\004\057" +
    "\347\001\002\000\054\003\uffa9\006\uffa9\007\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\057\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\070\uffa9\001\002\000\016\003" +
    "\236\004\233\011\014\012\033\013\032\047\234\001\002" +
    "\000\006\014\240\061\352\001\002\000\004\054\uffc4\001" +
    "\002\000\010\021\364\054\uffbf\055\uffbf\001\002\000\006" +
    "\054\uffbe\055\357\001\002\000\004\054\uffc1\001\002\000" +
    "\006\054\uffc0\055\uffc0\001\002\000\004\070\353\001\002" +
    "\000\006\054\uffbd\055\361\001\002\000\004\070\353\001" +
    "\002\000\006\054\uffbb\055\uffbb\001\002\000\006\054\uffbc" +
    "\055\uffbc\001\002\000\030\005\225\015\111\054\uffec\055" +
    "\uffec\060\124\062\074\063\045\064\067\066\115\067\120" +
    "\070\117\001\002\000\006\054\uffba\055\uffba\001\002\000" +
    "\004\057\367\001\002\000\010\003\uff92\047\uff92\057\uff92" +
    "\001\002\000\004\057\u0110\001\002\000\012\011\014\012" +
    "\033\013\032\050\374\001\002\000\004\057\uffef\001\002" +
    "\000\004\070\u010b\001\002\000\004\070\375\001\002\000" +
    "\004\060\376\001\002\000\012\011\014\012\033\013\032" +
    "\061\uff8f\001\002\000\004\070\u0103\001\002\000\004\061" +
    "\u0101\001\002\000\004\056\u0102\001\002\000\046\003\uff8c" +
    "\006\uff8c\007\uff8c\011\uff8c\012\uff8c\013\uff8c\034\uff8c\035" +
    "\uff8c\037\uff8c\040\uff8c\043\uff8c\045\uff8c\057\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\070\uff8c\001\002\000\006\055" +
    "\u0104\061\uff91\001\002\000\010\011\014\012\033\013\032" +
    "\001\002\000\006\055\u0106\061\uff90\001\002\000\010\011" +
    "\014\012\033\013\032\001\002\000\004\070\u0108\001\002" +
    "\000\006\055\uff8d\061\uff8d\001\002\000\004\070\u010a\001" +
    "\002\000\006\055\uff8e\061\uff8e\001\002\000\004\060\u010c" +
    "\001\002\000\012\011\014\012\033\013\032\061\uff8f\001" +
    "\002\000\004\061\u010e\001\002\000\004\056\u010f\001\002" +
    "\000\046\003\uff93\006\uff93\007\uff93\011\uff93\012\uff93\013" +
    "\uff93\034\uff93\035\uff93\037\uff93\040\uff93\043\uff93\045\uff93" +
    "\057\uff93\062\uff93\063\uff93\064\uff93\065\uff93\070\uff93\001" +
    "\002\000\010\003\ufff0\047\ufff0\057\ufff0\001\002\000\004" +
    "\054\uffc2\001\002\000\010\002\ufffd\003\ufffd\047\ufffd\001" +
    "\002\000\004\057\u0114\001\002\000\010\002\ufffe\003\ufffe" +
    "\047\ufffe\001\002\000\004\057\u0116\001\002\000\010\003" +
    "\uff8b\047\uff8b\057\uff8b\001\002\000\022\003\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\047\ufff4\057\ufff4\061\ufff4\001" +
    "\002\000\004\060\u011b\001\002\000\004\070\u011a\001\002" +
    "\000\012\021\364\054\uffbf\055\uffbf\060\u010c\001\002\000" +
    "\012\011\014\012\033\013\032\061\uff8f\001\002\000\004" +
    "\061\u011d\001\002\000\004\056\u011e\001\002\000\046\003" +
    "\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\034\ufff9" +
    "\035\ufff9\037\ufff9\040\ufff9\043\ufff9\045\ufff9\057\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\070\ufff9\001\002\000\004" +
    "\070\u0120\001\002\000\004\056\u0121\001\002\000\016\003" +
    "\uffff\011\uffff\012\uffff\013\uffff\047\uffff\057\uffff\001\002" +
    "\000\004\002\ufffb\001\002\000\010\002\ufffc\003\ufffc\047" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0121\000\012\002\010\003\005\004\003\043\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\005" +
    "\004\u0121\043\007\001\001\000\002\001\001\000\004\104" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\005\026\006\023\011\021\012\025\014\030\031\020\033" +
    "\027\075\015\100\016\101\022\105\017\001\001\000\002" +
    "\001\001\000\006\012\u0118\031\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\007\074\012\033\032\045\034\046\040\053\042" +
    "\037\044\062\045\065\046\064\047\071\050\042\052\067" +
    "\054\072\055\040\056\035\057\063\063\060\064\057\067" +
    "\041\070\036\102\u0114\103\075\001\001\000\016\005\026" +
    "\006\u0112\011\021\033\027\075\015\100\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\353\037\u0110" +
    "\051\355\001\001\000\016\005\026\006\371\011\021\033" +
    "\027\075\015\100\016\001\001\000\056\007\074\012\033" +
    "\032\045\034\046\040\053\042\037\044\062\045\065\046" +
    "\064\047\071\050\042\052\067\054\072\055\040\056\035" +
    "\057\063\063\060\064\057\067\041\070\036\102\365\103" +
    "\075\001\001\000\056\007\074\012\033\032\045\034\046" +
    "\040\053\042\037\044\062\045\065\046\064\047\071\050" +
    "\042\052\067\054\072\055\040\056\035\057\063\063\060" +
    "\064\057\067\041\070\036\102\052\103\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\353\037\354" +
    "\051\355\001\001\000\002\001\001\000\056\007\074\012" +
    "\033\032\045\034\046\040\053\042\037\044\062\045\065" +
    "\046\064\047\071\050\042\052\067\054\072\055\040\056" +
    "\035\057\063\063\060\064\057\067\041\070\036\102\345" +
    "\103\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\335\001\001\000\010\072\313\073\315\074\314" +
    "\001\001\000\056\007\074\012\033\032\045\034\046\040" +
    "\053\042\037\044\062\045\065\046\064\047\071\050\042" +
    "\052\067\054\072\055\040\056\035\057\063\063\060\064" +
    "\057\067\041\070\036\102\304\103\075\001\001\000\002" +
    "\001\001\000\004\013\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\247\015\223\016\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\007\074\012\033\032\045\034\046\040" +
    "\053\042\037\044\062\045\065\046\064\047\071\050\042" +
    "\052\067\054\072\055\040\056\035\057\063\063\060\064" +
    "\057\067\041\070\036\102\227\103\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\061" +
    "\202\062\200\065\203\001\001\000\056\007\074\012\033" +
    "\032\045\034\046\040\053\042\037\044\062\045\065\046" +
    "\064\047\071\050\042\052\067\054\072\055\040\056\035" +
    "\057\063\063\060\064\057\067\041\070\036\102\176\103" +
    "\075\001\001\000\002\001\001\000\004\013\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\113\016\111\020\115\021\121\022\107\023\112" +
    "\024\124\025\120\001\001\000\004\013\103\001\001\000" +
    "\002\001\001\000\056\007\074\012\033\032\045\034\046" +
    "\040\053\042\037\044\062\045\065\046\064\047\071\050" +
    "\042\052\067\054\072\055\040\056\035\057\063\063\060" +
    "\064\057\067\041\070\036\102\100\103\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\167\001\001\000\002\001\001\000\004\030" +
    "\164\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\131" +
    "\016\111\001\001\000\004\027\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\015\113\016\111\020\115" +
    "\021\121\024\130\025\120\001\001\000\004\027\127\001" +
    "\001\000\002\001\001\000\006\015\144\016\111\001\001" +
    "\000\006\015\143\016\111\001\001\000\002\001\001\000" +
    "\006\015\142\016\111\001\001\000\006\015\141\016\111" +
    "\001\001\000\006\015\140\016\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\113\016\111\020\146\021" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\113\016\111\021\163\001\001\000\010\015\113\016" +
    "\111\021\162\001\001\000\010\015\113\016\111\021\161" +
    "\001\001\000\010\015\113\016\111\021\160\001\001\000" +
    "\010\015\113\016\111\021\157\001\001\000\010\015\113" +
    "\016\111\021\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\113\016\111\020\115\021" +
    "\121\023\166\024\124\025\120\001\001\000\002\001\001" +
    "\000\004\030\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\015\113\016\111\020\115" +
    "\021\121\022\173\023\112\024\124\025\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\060\215\066\213\001" +
    "\001\000\002\001\001\000\010\061\202\062\206\065\203" +
    "\001\001\000\056\007\074\012\033\032\045\034\046\040" +
    "\053\042\037\044\062\045\065\046\064\047\071\050\042" +
    "\052\067\054\072\055\040\056\035\057\063\063\060\064" +
    "\057\067\041\070\036\102\204\103\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\113\016\111\020\115\021\121\022\210\023\112\024\124" +
    "\025\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\007\074\012\033\032\045\034\046" +
    "\040\053\042\037\044\062\045\065\046\064\047\071\050" +
    "\042\052\067\054\072\055\040\056\035\057\063\063\060" +
    "\064\057\067\041\070\036\102\217\103\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\222\015\223\016" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\025\026\236\031\020" +
    "\105\234\001\001\000\002\001\001\000\006\012\025\031" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\025\026\241\031\020\105\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\253\015\223\016\111\041\255\042" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\253\015\223\016\111\041\261\042\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\015\113\016\111\020" +
    "\115\021\121\022\264\023\112\024\124\025\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\275\053\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\300" +
    "\015\223\016\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\303\016\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\113\016\111\020\115\021\121\022\310\023\112" +
    "\024\124\025\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\326\001\001\000\056" +
    "\007\074\012\033\032\045\034\046\040\053\042\037\044" +
    "\062\045\065\046\064\047\071\050\042\052\067\054\072" +
    "\055\040\056\035\057\063\063\060\064\057\067\041\070" +
    "\036\102\322\103\075\001\001\000\010\072\321\073\315" +
    "\074\314\001\001\000\010\010\317\015\223\016\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\007\074\012\033\032\045\034\046\040\053\042\037\044" +
    "\062\045\065\046\064\047\071\050\042\052\067\054\072" +
    "\055\040\056\035\057\063\063\060\064\057\067\041\070" +
    "\036\102\331\103\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\343\016\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\025\026\350\031\020\105\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\362\051\355\001\001\000\002\001\001" +
    "\000\006\035\361\051\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\253\015\223\016\111\041\364" +
    "\042\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\376\076\377\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\u0104\001\001\000\004\012\u0108\001\001" +
    "\000\002\001\001\000\004\012\u0106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\376\076\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\035\353\037" +
    "\u0110\051\355\001\001\000\002\001\001\000\006\012\376" +
    "\076\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public int contadorLineas;
    private FrameCTDOA frameCTDOA;

    public SintacticoJava(LexicoJava lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msJP.setContadorLineas(contadorLineas);
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            frameCTDOA.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:\t\t\t\t\t<< " + (s.right + 1) + " >>"
                    + "\n\tColumna #\t\t\t\t\t<< " + (s.left + 1) + " >>"
                    + "\n\tToken NO Reconocido:\t\t\t\t<< " + (s.value) + " >>" );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoJava$actions {
  private final SintacticoJava parser;

  /** Constructor */
  CUP$SintacticoJava$actions(SintacticoJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoJava$do_action(
    int                        CUP$SintacticoJava$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJava$parser,
    java.util.Stack            CUP$SintacticoJava$stack,
    int                        CUP$SintacticoJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJava$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // estructuras_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.simbolosReturn(e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras_p",64, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // estructuras ::= THIS PUNTO ID IGUAL asignacion PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.msJP.asignacionVariablesThis(a, e, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // estructuras ::= return PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // estructuras ::= asignacion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // estructuras ::= solicitud_datos PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // estructuras ::= mensaje_terminal PUNTO_COMA 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructuras",65, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // metodos ::= metodos_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.metodos(((Procedimiento) e).getE(), i, ((Procedimiento) e).getU(), ileft, iright);
    parser.mc.finProcedimiento(false);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos",62, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // metodos_p ::= PUBLIC VOID ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
    RESULT = new Procedimiento(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("metodos_p",7, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // parametros_p ::= parametros_p COMA tipo_dato ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_p ::= COMA tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros ::= tipo_dato ID parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo s = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(i != null) {
            if(i instanceof Simbolo) {
                listaSimbolos.add((Simbolo) i);
            } else {
                listaSimbolos = (List<Simbolo>) i;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros ::= tipo_dato ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declaraUnaVariableParametro((Tipo) e, a, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // funcion ::= funcion_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), o, null, ((Procedimiento) e).getU(), oleft, oright);
        parser.mc.finProcedimiento(false);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion",59, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // funcion_p ::= PUBLIC tipo_dato ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.addCuartetoProcedimientoJava(e, "JAVA", i, (Tipo) a);
    RESULT = new Procedimiento(e, i, (Tipo) a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("funcion_p",25, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso",57, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // caso_p ::= CASE return_dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_p",58, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("cantidad_casos",56, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("caso_default",55, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch",54, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // switch_p ::= SWITCH PARENTESIS_A return_dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("switch_p",53, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_if",49, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if_p",48, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else_if",47, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("else",46, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("if",45, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ee",52, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ie ::= ELSE_IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ie",51, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ii ::= IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("ii",50, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // var ::= tipo_dato ID IGUAL return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("var",41, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for",40, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_asignacion",44, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_condicional",43, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // for_var ::= FOR PARENTESIS_A var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("for_var",42, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while",37, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("do_while_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while",34, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // while_p ::= while_n PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_p",36, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("while_n",35, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("p_parentesis",9, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("solicitud_datos",32, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion",31, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a), aleft, aright);
        } else { 
            parser.msJP.asignacionVariables(null, aleft, aright);
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables",30, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // asignacion_variables_d ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("asignacion_variables_d",39, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_p",28, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_ids",29, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(null, null, a.toString());
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_id_valores ::= asignacion_variables_d 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("lista_id_valores",27, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables",26, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",23, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",24, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimir((Simbolo) e); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("concatenacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_not",19, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_and",18, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional_or",17, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("or",22, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("and",21, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("condicional",16, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
	RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",15, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",14, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",13, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct_op",12, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",11, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("tipo_dato",8, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		  
	RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // return_dato ::= 
            {
              Object RESULT =null;

              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = parser.msJP.agregarCualquierSimbolo(new Simbolo(Constantes.RETURN_VAR, e));
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("return",5, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // estructura_mf_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estructura_mf_p ::= estructura_mf estructura_mf_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf_p",4, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estructura_mf ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estructura_mf ::= funcion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estructura_mf ::= metodos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estructura_mf",3, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // estruct ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // estruct ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estruct ::= PUBLIC declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("estruct",67, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables_locales ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables_locales ::= variables_locales estruct 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("variables_locales",66, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // contructor ::= constructor_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.metodos(((Procedimiento) e).getE(), c, ((Procedimiento) e).getU(), eleft, eright);
    parser.mc.finProcedimiento(false);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("contructor",63, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constructor_p ::= PUBLIC ID PARENTESIS_A parametros PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		parser.mc.addCuartetoProcedimientoJava(a, "JAVA", e, null); 
    RESULT = new Procedimiento(a, e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("constructor_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clases_p ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clases_p ::= clases clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_p",2, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // clases ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clases ::= clases_s variables_locales estructura_mf_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.claseJava((String) a, e, null, i, aleft, aright); parser.mc.finClase();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // clases ::= clases_s variables_locales contructor estructura_mf_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = parser.msJP.claseJava((String) a, e, (Simbolo) i, o, aleft, aright); parser.mc.finClase();
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases",1, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clases_s ::= PUBLIC CLASS ID CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = a; parser.mc.addClaseActual(a);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("clases_s",33, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= clases_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.peek()).value;
		parser.mi.addClasesJava(e);
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          return CUP$SintacticoJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.elementAt(CUP$SintacticoJava$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJava$parser.done_parsing();
          return CUP$SintacticoJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

