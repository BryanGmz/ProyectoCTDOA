
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 23:35:03 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.python;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 23:35:03 CST 2020
  */
public class SintacticoPython extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoPython() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoPython(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\004\000\002\010\003\000\002\033" +
    "\005\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\012\003\000\002\012\003\000\002\013" +
    "\003\000\002\016\003\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\022\006\000\002\022\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\003\000\002\024" +
    "\006\000\002\025\005\000\002\026\003\000\002\026\003" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\014\005\000\002\014\004\000\002\034\003\000\002" +
    "\035\006\000\002\032\005\000\002\032\005\000\002\030" +
    "\003\000\002\031\013\000\002\036\005\000\002\036\005" +
    "\000\002\037\003\000\002\037\005\000\002\037\007\000" +
    "\002\043\007\000\002\043\007\000\002\040\004\000\002" +
    "\041\004\000\002\042\003\000\002\045\007\000\002\045" +
    "\007\000\002\044\007\000\002\044\007\000\002\046\004" +
    "\000\002\046\002\000\002\047\004\000\002\047\005\000" +
    "\002\007\011\000\002\050\005\000\002\050\004\000\002" +
    "\004\003\000\002\004\002\000\002\051\003\000\002\051" +
    "\004\000\002\051\002\000\002\023\004\000\002\023\005" +
    "\000\002\052\004\000\002\052\004\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\004\000\002" +
    "\052\004\000\002\052\004\000\002\053\004\000\002\053" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\002\ufffd\036\005\044\010\001\002\000" +
    "\004\002\uffff\001\002\000\004\054\246\001\002\000\006" +
    "\002\ufffd\036\005\001\002\000\004\002\244\001\002\000" +
    "\006\002\ufffd\036\005\001\002\000\020\003\027\026\026" +
    "\027\012\030\032\033\017\037\014\054\020\001\002\000" +
    "\020\005\uffcf\007\uffcf\023\uffcf\042\uffcf\052\uffcf\053\uffcf" +
    "\054\uffcf\001\002\000\020\003\027\026\026\027\012\030" +
    "\032\033\017\037\014\054\020\001\002\000\016\005\060" +
    "\007\051\042\057\052\054\053\056\054\055\001\002\000" +
    "\020\005\154\007\051\023\152\042\057\052\054\053\056" +
    "\054\055\001\002\000\030\002\uffb3\003\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\033\uffb3\036\uffb3\037\uffb3\044\037\051\uffb3" +
    "\054\uffb3\001\002\000\020\005\154\007\051\023\152\042" +
    "\057\052\054\053\056\054\055\001\002\000\004\013\214" +
    "\001\002\000\030\002\uffa9\003\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\033\uffa9\036\uffa9\037\uffa9\044\uffa9\051\uffa9\054\uffa9" +
    "\001\002\000\020\003\027\026\026\027\012\030\032\033" +
    "\017\037\014\054\020\001\002\000\004\041\204\001\002" +
    "\000\034\002\uffba\003\uffba\026\uffba\027\uffba\030\uffba\033" +
    "\uffba\034\uffba\035\121\036\uffba\037\uffba\044\uffba\051\uffba" +
    "\054\uffba\001\002\000\030\002\uffab\003\uffab\026\uffab\027" +
    "\uffab\030\uffab\033\uffab\036\uffab\037\uffab\044\uffab\051\uffab" +
    "\054\uffab\001\002\000\004\042\110\001\002\000\006\044" +
    "\107\051\106\001\002\000\030\002\uffb3\003\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\033\uffb3\036\uffb3\037\uffb3\044\037\051" +
    "\uffb3\054\uffb3\001\002\000\030\002\uffaa\003\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\033\uffaa\036\uffaa\037\uffaa\044\uffaa\051" +
    "\uffaa\054\uffaa\001\002\000\004\054\042\001\002\000\030" +
    "\002\uffa4\003\027\026\026\027\012\030\032\033\017\036" +
    "\uffa4\037\014\044\uffa4\051\uffa4\054\020\001\002\000\010" +
    "\002\uffb5\036\uffb5\051\040\001\002\000\030\002\uffb3\003" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\033\uffb3\036\uffb3\037\uffb3" +
    "\044\037\051\uffb3\054\uffb3\001\002\000\030\002\uffac\003" +
    "\uffac\026\uffac\027\uffac\030\uffac\033\uffac\036\uffac\037\uffac" +
    "\044\uffac\051\uffac\054\uffac\001\002\000\030\002\uffb4\003" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\033\uffb4\036\uffb4\037\uffb4" +
    "\044\uffb4\051\uffb4\054\uffb4\001\002\000\006\002\uffb6\036" +
    "\uffb6\001\002\000\012\002\uffa5\036\uffa5\044\uffa5\051\uffa5" +
    "\001\002\000\004\031\uffcb\001\002\000\004\031\044\001" +
    "\002\000\004\032\045\001\002\000\004\042\046\001\002" +
    "\000\016\005\060\007\051\042\057\052\054\053\056\054" +
    "\055\001\002\000\006\040\101\043\uffc7\001\002\000\004" +
    "\043\076\001\002\000\012\042\057\052\054\053\056\054" +
    "\055\001\002\000\072\002\ufff3\003\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\033\ufff3\036\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\044\ufff3\051\ufff3\054\ufff3\001\002\000\046" +
    "\002\ufffa\003\ufffa\006\063\007\065\010\067\011\066\012" +
    "\062\026\ufffa\027\ufffa\030\ufffa\033\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\043\ufffa\044\ufffa\051\ufffa\054\ufffa\001\002\000" +
    "\072\002\ufff0\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\033\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044" +
    "\ufff0\051\ufff0\054\ufff0\001\002\000\072\002\ufff1\003\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\033\ufff1\036\ufff1\037" +
    "\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\051\ufff1\054\ufff1" +
    "\001\002\000\072\002\uffef\003\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\033\uffef\036\uffef\037\uffef\040\uffef\041\uffef" +
    "\043\uffef\044\uffef\051\uffef\054\uffef\001\002\000\014\007" +
    "\051\042\057\052\054\053\056\054\055\001\002\000\034" +
    "\002\ufffb\003\ufffb\026\ufffb\027\ufffb\030\ufffb\033\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\043\ufffb\044\ufffb\051\ufffb\054\ufffb" +
    "\001\002\000\016\006\063\007\065\010\067\011\066\012" +
    "\062\043\064\001\002\000\014\007\051\042\057\052\054" +
    "\053\056\054\055\001\002\000\014\007\051\042\057\052" +
    "\054\053\056\054\055\001\002\000\072\002\ufff2\003\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\043\ufff2\044\ufff2\051\ufff2\054\ufff2" +
    "\001\002\000\014\007\051\042\057\052\054\053\056\054" +
    "\055\001\002\000\014\007\051\042\057\052\054\053\056" +
    "\054\055\001\002\000\014\007\051\042\057\052\054\053" +
    "\056\054\055\001\002\000\072\002\ufff7\003\ufff7\006\ufff7" +
    "\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\030\ufff7\033\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\043\ufff7\044\ufff7\051\ufff7\054\ufff7\001\002" +
    "\000\072\002\ufff6\003\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\033\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6" +
    "\044\ufff6\051\ufff6\054\ufff6\001\002\000\072\002\ufff8\003" +
    "\ufff8\006\ufff8\007\ufff8\010\067\011\066\012\062\014\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\033\ufff8\036\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\051\ufff8\054" +
    "\ufff8\001\002\000\072\002\ufff9\003\ufff9\006\ufff9\007\ufff9" +
    "\010\067\011\066\012\062\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\033\ufff9\036\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\043\ufff9\044\ufff9\051\ufff9\054\ufff9\001\002\000\072" +
    "\002\ufff5\003\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\033" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5" +
    "\051\ufff5\054\ufff5\001\002\000\072\002\ufff4\003\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\033\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\043\ufff4\044\ufff4\051\ufff4\054\ufff4\001" +
    "\002\000\004\041\077\001\002\000\004\050\100\001\002" +
    "\000\020\003\uffca\026\uffca\027\uffca\030\uffca\033\uffca\037" +
    "\uffca\054\uffca\001\002\000\016\005\060\007\051\042\057" +
    "\052\054\053\056\054\055\001\002\000\006\040\103\043" +
    "\uffc6\001\002\000\016\005\060\007\051\042\057\052\054" +
    "\053\056\054\055\001\002\000\004\043\uffc5\001\002\000" +
    "\030\002\uffa8\003\uffa8\026\uffa8\027\uffa8\030\uffa8\033\uffa8" +
    "\036\uffa8\037\uffa8\044\uffa8\051\uffa8\054\uffa8\001\002\000" +
    "\030\002\uffa6\003\uffa6\026\uffa6\027\uffa6\030\uffa6\033\uffa6" +
    "\036\uffa6\037\uffa6\044\uffa6\051\uffa6\054\uffa6\001\002\000" +
    "\030\002\uffa7\003\uffa7\026\uffa7\027\uffa7\030\uffa7\033\uffa7" +
    "\036\uffa7\037\uffa7\044\uffa7\051\uffa7\054\uffa7\001\002\000" +
    "\014\004\113\042\057\052\054\053\056\054\055\001\002" +
    "\000\010\006\115\040\114\043\116\001\002\000\010\006" +
    "\uffd9\040\uffd9\043\uffd9\001\002\000\010\006\uffda\040\uffda" +
    "\043\uffda\001\002\000\014\004\113\042\057\052\054\053" +
    "\056\054\055\001\002\000\014\004\113\042\057\052\054" +
    "\053\056\054\055\001\002\000\030\002\uffd8\003\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\033\uffd8\036\uffd8\037\uffd8\044\uffd8" +
    "\051\uffd8\054\uffd8\001\002\000\010\006\uffdc\040\uffdc\043" +
    "\uffdc\001\002\000\010\006\uffdb\040\uffdb\043\uffdb\001\002" +
    "\000\020\005\154\007\051\023\152\042\057\052\054\053" +
    "\056\054\055\001\002\000\032\002\uffb9\003\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\033\uffb9\034\134\036\uffb9\037\uffb9\044" +
    "\uffb9\051\uffb9\054\uffb9\001\002\000\034\002\uffba\003\uffba" +
    "\026\uffba\027\uffba\030\uffba\033\uffba\034\uffba\035\121\036" +
    "\uffba\037\uffba\044\uffba\051\uffba\054\uffba\001\002\000\004" +
    "\041\125\001\002\000\004\050\126\001\002\000\020\003" +
    "\027\026\026\027\012\030\032\033\017\037\014\054\020" +
    "\001\002\000\006\044\131\051\130\001\002\000\034\002" +
    "\uffbf\003\uffbf\026\uffbf\027\uffbf\030\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\044\uffbf\051\uffbf\054\uffbf\001" +
    "\002\000\034\002\uffbe\003\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\044\uffbe\051" +
    "\uffbe\054\uffbe\001\002\000\032\002\uffbb\003\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\044" +
    "\uffbb\051\uffbb\054\uffbb\001\002\000\004\041\136\001\002" +
    "\000\004\041\uffc0\001\002\000\030\002\uffb8\003\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\033\uffb8\036\uffb8\037\uffb8\044\uffb8" +
    "\051\uffb8\054\uffb8\001\002\000\004\050\137\001\002\000" +
    "\020\003\027\026\026\027\012\030\032\033\017\037\014" +
    "\054\020\001\002\000\024\003\027\026\026\027\012\030" +
    "\032\033\017\037\014\044\143\051\uffa4\054\020\001\002" +
    "\000\004\051\142\001\002\000\030\002\uffbd\003\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\033\uffbd\036\uffbd\037\uffbd\044\uffbd" +
    "\051\uffbd\054\uffbd\001\002\000\030\002\uffbc\003\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\033\uffbc\036\uffbc\037\uffbc\044\uffbc" +
    "\051\uffbc\054\uffbc\001\002\000\004\041\uffc1\001\002\000" +
    "\006\025\202\041\uffe5\001\002\000\042\006\063\007\065" +
    "\010\067\011\066\012\062\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\041\uffe7" +
    "\043\uffe7\001\002\000\010\024\uffdd\025\uffdd\041\uffdd\001" +
    "\002\000\010\024\uffdf\025\uffdf\041\uffdf\001\002\000\020" +
    "\014\165\015\163\016\164\017\166\020\170\021\167\022" +
    "\171\001\002\000\004\042\160\001\002\000\010\024\155" +
    "\025\uffe1\041\uffe1\001\002\000\030\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\041\uffe6\043\uffe6\001\002\000\020\005\uffe4\007\uffe4\023" +
    "\uffe4\042\uffe4\052\uffe4\053\uffe4\054\uffe4\001\002\000\020" +
    "\005\154\007\051\023\152\042\057\052\054\053\056\054" +
    "\055\001\002\000\010\024\155\025\uffe0\041\uffe0\001\002" +
    "\000\016\005\154\007\051\042\057\052\054\053\056\054" +
    "\055\001\002\000\004\043\162\001\002\000\010\024\uffde" +
    "\025\uffde\041\uffde\001\002\000\016\005\154\007\051\042" +
    "\057\052\054\053\056\054\055\001\002\000\016\005\154" +
    "\007\051\042\057\052\054\053\056\054\055\001\002\000" +
    "\016\005\154\007\051\042\057\052\054\053\056\054\055" +
    "\001\002\000\016\005\154\007\051\042\057\052\054\053" +
    "\056\054\055\001\002\000\016\005\154\007\051\042\057" +
    "\052\054\053\056\054\055\001\002\000\016\005\154\007" +
    "\051\042\057\052\054\053\056\054\055\001\002\000\016" +
    "\005\154\007\051\042\057\052\054\053\056\054\055\001" +
    "\002\000\012\024\uffe8\025\uffe8\041\uffe8\043\uffe8\001\002" +
    "\000\012\024\uffe9\025\uffe9\041\uffe9\043\uffe9\001\002\000" +
    "\012\024\uffea\025\uffea\041\uffea\043\uffea\001\002\000\012" +
    "\024\uffeb\025\uffeb\041\uffeb\043\uffeb\001\002\000\012\024" +
    "\uffed\025\uffed\041\uffed\043\uffed\001\002\000\012\024\uffec" +
    "\025\uffec\041\uffec\043\uffec\001\002\000\012\024\uffee\025" +
    "\uffee\041\uffee\043\uffee\001\002\000\020\005\154\007\051" +
    "\023\152\042\057\052\054\053\056\054\055\001\002\000" +
    "\020\005\uffe3\007\uffe3\023\uffe3\042\uffe3\052\uffe3\053\uffe3" +
    "\054\uffe3\001\002\000\006\025\202\041\uffe2\001\002\000" +
    "\004\050\205\001\002\000\020\003\027\026\026\027\012" +
    "\030\032\033\017\037\014\054\020\001\002\000\006\044" +
    "\210\051\207\001\002\000\034\002\uffc4\003\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\044\uffc4\051\uffc4\054\uffc4\001\002\000\034\002\uffc3" +
    "\003\uffc3\026\uffc3\027\uffc3\030\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\044\uffc3\051\uffc3\054\uffc3\001\002" +
    "\000\006\044\213\051\212\001\002\000\030\002\uffc8\003" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\033\uffc8\036\uffc8\037\uffc8" +
    "\044\uffc8\051\uffc8\054\uffc8\001\002\000\030\002\uffc9\003" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\033\uffc9\036\uffc9\037\uffc9" +
    "\044\uffc9\051\uffc9\054\uffc9\001\002\000\024\005\060\007" +
    "\051\042\057\045\222\046\220\047\221\052\054\053\056" +
    "\054\055\001\002\000\030\002\uffd6\003\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\033\uffd6\036\uffd6\037\uffd6\044\uffd6\051\uffd6" +
    "\054\uffd6\001\002\000\030\002\uffd5\003\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\033\uffd5\036\uffd5\037\uffd5\044\uffd5\051\uffd5" +
    "\054\uffd5\001\002\000\030\002\uffd7\003\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\033\uffd7\036\uffd7\037\uffd7\044\uffd7\051\uffd7" +
    "\054\uffd7\001\002\000\004\042\223\001\002\000\004\042" +
    "\223\001\002\000\004\042\223\001\002\000\006\004\226" +
    "\043\225\001\002\000\030\002\uffd4\003\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\033\uffd4\036\uffd4\037\uffd4\044\uffd4\051\uffd4" +
    "\054\uffd4\001\002\000\030\002\uffd0\003\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\033\uffd0\036\uffd0\037\uffd0\044\uffd0\051\uffd0" +
    "\054\uffd0\001\002\000\004\043\227\001\002\000\030\002" +
    "\uffd1\003\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\036\uffd1" +
    "\037\uffd1\044\uffd1\051\uffd1\054\uffd1\001\002\000\030\002" +
    "\uffd2\003\uffd2\026\uffd2\027\uffd2\030\uffd2\033\uffd2\036\uffd2" +
    "\037\uffd2\044\uffd2\051\uffd2\054\uffd2\001\002\000\030\002" +
    "\uffd3\003\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3\036\uffd3" +
    "\037\uffd3\044\uffd3\051\uffd3\054\uffd3\001\002\000\004\041" +
    "\uffc2\001\002\000\030\002\uffad\003\uffad\026\uffad\027\uffad" +
    "\030\uffad\033\uffad\036\uffad\037\uffad\044\uffad\051\uffad\054" +
    "\uffad\001\002\000\004\041\235\001\002\000\004\050\236" +
    "\001\002\000\020\003\uffce\026\uffce\027\uffce\030\uffce\033" +
    "\uffce\037\uffce\054\uffce\001\002\000\030\002\ufffc\003\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\033\ufffc\036\ufffc\037\ufffc\044" +
    "\ufffc\051\ufffc\054\ufffc\001\002\000\006\044\242\051\241" +
    "\001\002\000\030\002\uffcc\003\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\033\uffcc\036\uffcc\037\uffcc\044\uffcc\051\uffcc\054\uffcc" +
    "\001\002\000\030\002\uffcd\003\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\033\uffcd\036\uffcd\037\uffcd\044\uffcd\051\uffcd\054\uffcd" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\004\002\ufffe\001\002\000\004\042\247\001\002" +
    "\000\006\043\uffb0\054\250\001\002\000\006\040\255\043" +
    "\uffb2\001\002\000\004\043\252\001\002\000\004\041\253" +
    "\001\002\000\004\050\254\001\002\000\020\003\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\033\uffb7\037\uffb7\054\uffb7\001\002" +
    "\000\004\054\261\001\002\000\006\040\257\043\uffb1\001" +
    "\002\000\004\054\260\001\002\000\006\040\uffae\043\uffae" +
    "\001\002\000\006\040\uffaf\043\uffaf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\012\002\006\003\003\007\010\050\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\244" +
    "\007\010\050\005\001\001\000\002\001\001\000\010\003" +
    "\242\007\010\050\005\001\001\000\034\005\027\024\015" +
    "\025\034\031\021\032\024\034\014\035\012\036\030\040" +
    "\022\043\023\047\020\052\032\053\033\001\001\000\002" +
    "\001\001\000\034\005\027\024\015\025\034\031\021\032" +
    "\024\034\014\035\012\036\030\040\022\043\023\047\020" +
    "\052\032\053\237\001\001\000\010\006\236\010\052\033" +
    "\051\001\001\000\022\010\145\011\146\012\150\013\233" +
    "\020\144\021\152\022\147\033\051\001\001\000\004\004" +
    "\232\001\001\000\022\010\145\011\146\012\150\013\231" +
    "\020\144\021\152\022\147\033\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\027\024\015\025\034" +
    "\031\021\032\024\034\014\035\012\036\030\040\022\043" +
    "\023\047\020\052\032\053\210\001\001\000\002\001\001" +
    "\000\010\041\123\045\122\046\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\104" +
    "\001\001\000\002\001\001\000\004\030\042\001\001\000" +
    "\034\005\027\024\015\025\034\031\021\032\024\034\014" +
    "\035\012\036\030\040\022\043\023\047\020\052\032\053" +
    "\040\001\001\000\002\001\001\000\004\004\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\046\010\052\033" +
    "\051\037\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\060\033\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\073\033\051\001\001\000\006" +
    "\010\072\033\051\001\001\000\002\001\001\000\006\010" +
    "\071\033\051\001\001\000\006\010\070\033\051\001\001" +
    "\000\006\010\067\033\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\101\010\052\033\051" +
    "\001\001\000\002\001\001\000\010\006\103\010\052\033" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\110\033\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\117\033\111\001\001\000\006\015\116\033" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\145\011\146\012\150\013\143\020" +
    "\144\021\152\022\147\033\051\001\001\000\006\042\132" +
    "\044\134\001\001\000\010\041\123\045\122\046\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\027" +
    "\024\015\025\034\031\021\032\024\034\014\035\012\036" +
    "\030\040\022\043\023\047\020\052\032\053\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\027\024\015\025" +
    "\034\031\021\032\024\034\014\035\012\036\030\040\022" +
    "\043\023\047\020\052\137\053\140\001\001\000\034\005" +
    "\027\024\015\025\034\031\021\032\024\034\014\035\012" +
    "\036\030\040\022\043\023\047\020\052\032\053\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\145\011\146\012\150" +
    "\021\156\022\147\033\051\001\001\000\004\016\155\001" +
    "\001\000\012\010\145\011\160\012\150\033\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\145\012" +
    "\177\033\051\001\001\000\010\010\145\012\176\033\051" +
    "\001\001\000\010\010\145\012\175\033\051\001\001\000" +
    "\010\010\145\012\174\033\051\001\001\000\010\010\145" +
    "\012\173\033\051\001\001\000\010\010\145\012\172\033" +
    "\051\001\001\000\010\010\145\012\171\033\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\010\145\011\146\012\150\020\202\021" +
    "\152\022\147\033\051\001\001\000\002\001\001\000\004" +
    "\017\200\001\001\000\002\001\001\000\034\005\027\024" +
    "\015\025\034\031\021\032\024\034\014\035\012\036\030" +
    "\040\022\043\023\047\020\052\032\053\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\214\010\052\026\216\027\215\033\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\230\001\001\000\004\014\227\001\001\000\004\014\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\250\001\001\000\004\023" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoPython$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoPython$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoPython$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public int contadorLineas;
    public LexicoPython lexer;
    private FrameCTDOA frameCTDOA;
    
    public void setContadorLineas(int contadorLineas){
        this.contadorLineas = contadorLineas;
        msVB_PY.setContadorLineas(contadorLineas);
    }

    public SintacticoPython(LexicoPython lexer) { 
        super(lexer);   
        this.lexer = lexer;
        msVB_PY.nuevoAnalisis();
    }

    public void setLinea(int contadorLineas){
        this.contadorLineas = contadorLineas;
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            frameCTDOA.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:\t\t\t\t\t<< " + (s.right + 1 + contadorLineas) + " >>"
                    + "\n\tColumna #\t\t\t\t\t<< " + (s.left + 1 + contadorLineas) + " >>"
                    + "\n\tToken NO Reconocido:\t\t\t\t<< " + (s.value) + " >>" );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoPython$actions {
  private final SintacticoPython parser;

  /** Constructor */
  CUP$SintacticoPython$actions(SintacticoPython parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoPython$do_action(
    int                        CUP$SintacticoPython$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoPython$parser,
    java.util.Stack            CUP$SintacticoPython$stack,
    int                        CUP$SintacticoPython$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoPython$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoPython$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // estructuras_p ::= estructuras 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		if(e == null) RESULT = new ArrayList<Simbolo>(); else RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.simbolosReturn(a, e, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_p",41, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // estructuras ::= error DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // estructuras ::= error SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // estructuras ::= return space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // estructuras ::= asignacion_variables space 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.msVB_PY.declararVaiablesPY(eleft, eright, (Simbolo) e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructuras ::= mensaje_terminal space 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras",40, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_p ::= parametros_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.parametroPY(e, eleft, eright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_p ::= COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.parametroPY(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros_p",17, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros ::= ID parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.parametroPY(e, eleft, eright);
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(s != null) {
            listaSimbolos.add((Simbolo) s);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.parametroPY(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("parametros",39, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // space ::= 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // space ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("space",2, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // def ::= def_p estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.finProcedimiento(true); parser.lexer.limpiarStack(); RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",38, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // def ::= def_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.finProcedimiento(true); parser.lexer.limpiarStack(); RESULT = parser.msVB_PY.def(((Procedimiento) e).getU(), ((Procedimiento) e).getE(), i, ileft, iright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def",38, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // def_p ::= DEF ID PARENTESIS_A parametros PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		parser.mc.addCuartetoProcedimiento(2, a, "PY", e, Constantes.FLOAT_VAR_VB_PY);  RESULT = new Procedimiento(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("def_p",5, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructura_if",37, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if_p",36, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // else ::= ee DOS_PUNTOS INDENT estructuras SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // else ::= ee DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else",34, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // else_if ::= ie DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("else_if",35, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ee",32, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ie ::= ELIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ie",31, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("ii",30, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= ii DOS_PUNTOS INDENT estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if ::= ii DOS_PUNTOS INDENT estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("if",33, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rango ::= return_dato COMA return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        if(e != null) { 
            lista.add((Simbolo) i); 
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rango ::= return_dato COMA return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            lista.add((Simbolo) a);
        } 
        if(e != null) {
            lista.add((Simbolo) e);
        }
        RESULT = lista;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rango ::= return_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("rango",29, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for ::= for_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		 
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for ::= for_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
        RESULT = parser.msVB_PY.cicloForPY("", eleft, eright, ((For) e).getRango(), i);
        parser.mc.finFor(((For) e).getLista());
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for",28, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_p ::= FOR var IN RANGE PARENTESIS_A rango PARENTESIS_C DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		RESULT = new For(e, (Simbolo) a, parser.mc.addForPY(a, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("for_p",23, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // var ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.idPY((String) e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while ::= while_p estructuras_p DEDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // while ::= while_p estructuras_p SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
            parser.mc.finWhile(((While) a).getIdEtiqueta());
            parser.mc.imprimirResto();
        
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_p ::= while_n condicional DOS_PUNTOS INDENT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_p",27, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("while_n",26, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // solicitud_p ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // solicitud_p ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_p",10, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // solicitud_datos ::= CINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // solicitud_datos ::= FINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // solicitud_datos ::= IINPUT solicitud_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("solicitud_datos",21, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion",20, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		  
        if (e != null) {
            if (((Simbolo) e).getCuarteto() != null) {
                RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e).getCuarteto().getResultado(), a);
            } else {
                RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
            }
        }
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("asignacion_variables",19, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mensaje_terminal ::= PRINT PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",18, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimir((Simbolo) e); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, e)); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // concatenacion ::= concatenacion COMA concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("concatenacion",11, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_not",16, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_and",15, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional_or",14, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("or",13, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("and",12, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("condicional",9, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",8, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",7, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estruct",25, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",6, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return_dato",4, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = new Simbolo(Constantes.RETURN_VAR, e);
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("return",3, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructuras_def ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructuras_def ::= def estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("estructuras_def",1, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= SALTO estructuras_def 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.peek()).value;
		parser.mi.setClasePY(parser.msVB_PY.clasePY(e));
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          return CUP$SintacticoPython$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoPython$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.elementAt(CUP$SintacticoPython$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPython$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoPython$parser.done_parsing();
          return CUP$SintacticoPython$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

