
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 23:35:03 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.c;

import java_cup.runtime.*;
import java.io.StringReader;
import proyectofinal.ctdoa.backend.analizador.java.*;
import proyectofinal.ctdoa.backend.analizador.visual_basic.*;
import proyectofinal.ctdoa.backend.analizador.python.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 23:35:03 CST 2020
  */
public class SintacticoC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoC() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\323\000\002\002\004\000\002\002\010\000\002\003" +
    "\007\000\002\004\006\000\002\006\003\000\002\007\003" +
    "\000\002\010\003\000\002\012\010\000\002\012\004\000" +
    "\002\012\003\000\002\012\005\000\002\012\004\000\002" +
    "\013\004\000\002\013\002\000\002\014\003\000\002\014" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\021\004\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\022\004\000\002" +
    "\022\002\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\004" +
    "\000\002\024\003\000\002\025\005\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\031\003\000" +
    "\002\032\003\000\002\033\005\000\002\033\003\000\002" +
    "\034\005\000\002\034\003\000\002\035\006\000\002\035" +
    "\003\000\002\037\004\000\002\036\004\000\002\036\004" +
    "\000\002\040\005\000\002\040\003\000\002\042\004\000" +
    "\002\042\003\000\002\041\004\000\002\041\005\000\002" +
    "\043\005\000\002\043\005\000\002\044\003\000\002\044" +
    "\003\000\002\045\004\000\002\046\005\000\002\046\006" +
    "\000\002\104\007\000\002\105\007\000\002\106\004\000" +
    "\002\051\005\000\002\052\005\000\002\053\005\000\002" +
    "\054\004\000\002\054\002\000\002\055\004\000\002\055" +
    "\005\000\002\017\007\000\002\056\006\000\002\057\007" +
    "\000\002\057\002\000\002\060\003\000\002\060\004\000" +
    "\002\107\005\000\002\061\006\000\002\061\004\000\002" +
    "\047\003\000\002\050\007\000\002\062\005\000\002\020" +
    "\004\000\002\063\012\000\002\073\006\000\002\074\005" +
    "\000\002\075\006\000\002\064\005\000\002\065\005\000" +
    "\002\065\006\000\002\115\005\000\002\115\004\000\002" +
    "\115\004\000\002\067\004\000\002\067\003\000\002\067" +
    "\002\000\002\070\004\000\002\070\005\000\002\071\010" +
    "\000\002\071\010\000\002\071\012\000\002\072\006\000" +
    "\002\111\003\000\002\111\004\000\002\112\004\000\002" +
    "\112\005\000\002\110\003\000\002\110\006\000\002\076" +
    "\014\000\002\076\013\000\002\100\004\000\002\100\003" +
    "\000\002\005\004\000\002\005\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\102\012\000\002" +
    "\102\010\000\002\103\003\000\002\103\004\000\002\103" +
    "\004\000\002\103\005\000\002\066\004\000\002\066\005" +
    "\000\002\066\005\000\002\066\006\000\002\113\004\000" +
    "\002\113\003\000\002\113\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\004\000\002\113\003\000\002\113" +
    "\006\000\002\113\003\000\002\113\004\000\002\113\004" +
    "\000\002\113\004\000\002\113\004\000\002\113\003\000" +
    "\002\113\004\000\002\113\004\000\002\023\006\000\002" +
    "\023\011\000\002\023\010\000\002\114\004\000\002\114" +
    "\002\000\002\015\004\000\002\015\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\004\005\005\001\002\000\004\007\u0190\001" +
    "\002\000\004\007\ufffd\001\002\000\022\003\uffe8\004\uffe8" +
    "\011\013\023\uffe8\024\uffe8\025\uffe8\056\uffe8\060\uffe8\001" +
    "\002\000\004\002\010\001\002\000\004\002\001\001\002" +
    "\000\020\003\025\004\030\023\022\024\031\025\032\056" +
    "\ufff4\060\033\001\002\000\022\003\uffe8\004\uffe8\011\013" +
    "\023\uffe8\024\uffe8\025\uffe8\056\uffe8\060\uffe8\001\002\000" +
    "\014\012\017\013\020\014\016\015\014\016\015\001\002" +
    "\000\022\003\uffee\004\uffee\011\uffee\023\uffee\024\uffee\025" +
    "\uffee\056\uffee\060\uffee\001\002\000\022\003\uffea\004\uffea" +
    "\011\uffea\023\uffea\024\uffea\025\uffea\056\uffea\060\uffea\001" +
    "\002\000\022\003\uffeb\004\uffeb\011\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\056\uffeb\060\uffeb\001\002\000\022\003\uffec\004" +
    "\uffec\011\uffec\023\uffec\024\uffec\025\uffec\056\uffec\060\uffec" +
    "\001\002\000\022\003\uffed\004\uffed\011\uffed\023\uffed\024" +
    "\uffed\025\uffed\056\uffed\060\uffed\001\002\000\020\003\uffe9" +
    "\004\uffe9\023\uffe9\024\uffe9\025\uffe9\056\uffe9\060\uffe9\001" +
    "\002\000\004\111\ufff1\001\002\000\004\077\u018e\001\002" +
    "\000\020\003\025\004\030\023\022\024\031\025\032\056" +
    "\ufff4\060\033\001\002\000\004\077\u018c\001\002\000\004" +
    "\111\u0188\001\002\000\004\056\075\001\002\000\020\003" +
    "\ufff8\004\ufff8\023\ufff8\024\ufff8\025\ufff8\056\ufff8\060\ufff8" +
    "\001\002\000\004\111\ufff0\001\002\000\004\111\uffef\001" +
    "\002\000\010\023\022\024\031\025\032\001\002\000\004" +
    "\111\035\001\002\000\004\035\036\001\002\000\016\017" +
    "\050\027\037\105\047\107\043\110\045\111\044\001\002" +
    "\000\012\105\047\107\043\110\045\111\044\001\002\000" +
    "\046\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\102\uffdc\106\uffdc\001\002" +
    "\000\046\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\076\uffe1\077\uffe1\100\uffe1\102\uffe1\106\uffe1\001" +
    "\002\000\024\026\053\027\055\030\057\031\056\032\052" +
    "\076\ufff2\077\ufff2\100\ufff2\106\ufff2\001\002\000\046\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\047\uffde\050\uffde\076" +
    "\uffde\077\uffde\100\uffde\102\uffde\106\uffde\001\002\000\050" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf" +
    "\076\uffdf\077\uffdf\100\uffdf\101\067\102\uffdf\106\uffdf\001" +
    "\002\000\046\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\050\uffdd\076\uffdd\077\uffdd\100\uffdd\102\uffdd\106\uffdd" +
    "\001\002\000\004\077\065\001\002\000\014\027\037\105" +
    "\047\107\043\110\045\111\044\001\002\000\012\076\ufff3" +
    "\077\ufff3\100\ufff3\106\ufff3\001\002\000\016\026\053\027" +
    "\055\030\057\031\056\032\052\106\054\001\002\000\014" +
    "\027\037\105\047\107\043\110\045\111\044\001\002\000" +
    "\014\027\037\105\047\107\043\110\045\111\044\001\002" +
    "\000\046\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\050\uffe0\076\uffe0\077\uffe0\100\uffe0\102\uffe0\106\uffe0\001" +
    "\002\000\014\027\037\105\047\107\043\110\045\111\044" +
    "\001\002\000\014\027\037\105\047\107\043\110\045\111" +
    "\044\001\002\000\014\027\037\105\047\107\043\110\045" +
    "\111\044\001\002\000\046\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\047\uffe5\050\uffe5\076\uffe5\077\uffe5\100\uffe5\102" +
    "\uffe5\106\uffe5\001\002\000\046\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\047\uffe4\050\uffe4\076\uffe4\077\uffe4\100\uffe4" +
    "\102\uffe4\106\uffe4\001\002\000\046\026\uffe6\027\uffe6\030" +
    "\057\031\056\032\052\040\uffe6\041\uffe6\042\uffe6\043\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\050\uffe6\076\uffe6\077\uffe6\100" +
    "\uffe6\102\uffe6\106\uffe6\001\002\000\046\026\uffe7\027\uffe7" +
    "\030\057\031\056\032\052\040\uffe7\041\uffe7\042\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\102\uffe7\106\uffe7\001\002\000\046\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\045\uffe3\047\uffe3\050\uffe3\076\uffe3\077" +
    "\uffe3\100\uffe3\102\uffe3\106\uffe3\001\002\000\020\003\ufffa" +
    "\004\ufffa\023\ufffa\024\ufffa\025\ufffa\056\ufffa\060\ufffa\001" +
    "\002\000\050\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\035\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\047\uffbd\050\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd" +
    "\106\uffbd\001\002\000\014\027\037\105\047\107\043\110" +
    "\045\111\044\001\002\000\016\026\053\027\055\030\057" +
    "\031\056\032\052\102\071\001\002\000\052\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\101\067\102\uffbc\106\uffbc\001\002" +
    "\000\050\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\035" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\047\uffbb\050\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb\106" +
    "\uffbb\001\002\000\046\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\047\uffe2\050\uffe2\076\uffe2\077\uffe2\100\uffe2\102\uffe2" +
    "\106\uffe2\001\002\000\050\003\125\004\127\010\126\020" +
    "\115\021\146\022\111\023\022\024\031\025\032\036\110" +
    "\051\107\061\122\064\132\070\116\071\140\072\150\073" +
    "\131\104\uff63\111\123\001\002\000\004\057\076\001\002" +
    "\000\004\105\077\001\002\000\004\106\100\001\002\000" +
    "\004\103\101\001\002\000\050\003\uffff\004\uffff\010\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\036" +
    "\uffff\051\uffff\061\uffff\064\uffff\070\uffff\071\uffff\072\uffff" +
    "\073\uffff\104\uffff\111\uffff\001\002\000\004\111\u0177\001" +
    "\002\000\004\077\u0176\001\002\000\050\003\125\004\127" +
    "\010\126\020\115\021\146\022\111\023\022\024\031\025" +
    "\032\036\110\051\107\061\122\064\132\070\116\071\140" +
    "\072\150\073\131\104\uff63\111\123\001\002\000\056\003" +
    "\uff73\004\uff73\010\uff73\020\uff73\021\uff73\022\uff73\023\uff73" +
    "\024\uff73\025\uff73\036\uff73\051\uff73\061\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\104\uff73\111\uff73\001\002\000\004\111\u016c\001\002\000" +
    "\004\105\u015d\001\002\000\004\105\u015a\001\002\000\004" +
    "\075\u014e\001\002\000\004\065\u0140\001\002\000\050\003" +
    "\125\004\127\010\126\020\115\021\146\022\111\023\022" +
    "\024\031\025\032\036\110\051\107\061\122\064\132\070" +
    "\116\071\140\072\150\073\131\104\uff63\111\123\001\002" +
    "\000\004\077\u0135\001\002\000\004\075\u0130\001\002\000" +
    "\004\105\u0126\001\002\000\004\077\u0125\001\002\000\004" +
    "\077\u0124\001\002\000\056\003\uff71\004\uff71\010\uff71\020" +
    "\uff71\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\036\uff71" +
    "\051\uff71\061\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070" +
    "\uff71\071\uff71\072\uff71\073\uff71\104\uff71\111\uff71\001\002" +
    "\000\004\105\u0120\001\002\000\006\035\u011a\101\067\001" +
    "\002\000\004\104\u0119\001\002\000\006\077\u0117\104\u0118" +
    "\001\002\000\004\105\u0114\001\002\000\056\003\uff6a\004" +
    "\uff6a\010\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a" +
    "\025\uff6a\036\uff6a\051\uff6a\061\uff6a\064\uff6a\065\uff6a\066" +
    "\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\104\uff6a" +
    "\111\uff6a\001\002\000\050\003\125\004\127\010\126\020" +
    "\115\021\146\022\111\023\022\024\031\025\032\036\110" +
    "\051\107\061\122\064\132\070\116\071\140\072\150\073" +
    "\131\104\uff63\111\123\001\002\000\004\105\277\001\002" +
    "\000\004\105\273\001\002\000\056\003\uff6f\004\uff6f\010" +
    "\uff6f\020\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f" +
    "\036\uff6f\051\uff6f\061\uff6f\064\uff6f\065\uff6f\066\uff6f\067" +
    "\uff6f\070\uff6f\071\uff6f\072\uff6f\073\uff6f\104\uff6f\111\uff6f" +
    "\001\002\000\056\003\uff76\004\uff76\010\uff76\020\uff76\021" +
    "\uff76\022\uff76\023\uff76\024\uff76\025\uff76\036\uff76\051\uff76" +
    "\061\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071" +
    "\uff76\072\uff76\073\uff76\104\uff76\111\uff76\001\002\000\062" +
    "\003\uffb3\004\uffb3\010\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\036\uffb3\051\uffb3\061\uffb3\062\252" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\104\uffb3\111\uffb3\001\002\000\050" +
    "\003\125\004\127\010\126\020\115\021\146\022\111\023" +
    "\022\024\031\025\032\036\110\051\107\061\122\064\132" +
    "\070\116\071\140\072\150\073\131\104\uff63\111\123\001" +
    "\002\000\004\105\244\001\002\000\004\105\uffa7\001\002" +
    "\000\056\003\uff74\004\uff74\010\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\024\uff74\025\uff74\036\uff74\051\uff74\061\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072" +
    "\uff74\073\uff74\104\uff74\111\uff74\001\002\000\004\077\243" +
    "\001\002\000\056\003\uff75\004\uff75\010\uff75\020\uff75\021" +
    "\uff75\022\uff75\023\uff75\024\uff75\025\uff75\036\uff75\051\uff75" +
    "\061\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\104\uff75\111\uff75\001\002\000\020" +
    "\017\214\027\037\046\212\105\047\107\043\110\045\111" +
    "\044\001\002\000\056\003\125\004\127\010\126\020\115" +
    "\021\146\022\111\023\022\024\031\025\032\036\110\051" +
    "\107\061\122\064\132\065\uff63\066\uff63\067\uff63\070\116" +
    "\071\140\072\150\073\131\104\uff63\111\123\001\002\000" +
    "\004\075\176\001\002\000\004\077\175\001\002\000\004" +
    "\103\174\001\002\000\004\035\152\001\002\000\024\017" +
    "\050\020\115\021\146\022\153\027\037\105\047\107\043" +
    "\110\045\111\044\001\002\000\004\075\157\001\002\000" +
    "\004\077\uffc0\001\002\000\006\076\uffbf\077\uffbf\001\002" +
    "\000\006\076\uffbe\077\uffbe\001\002\000\004\111\160\001" +
    "\002\000\004\075\161\001\002\000\004\111\162\001\002" +
    "\000\004\105\163\001\002\000\016\027\037\105\047\106" +
    "\uff97\107\043\110\045\111\044\001\002\000\020\026\053" +
    "\027\055\030\057\031\056\032\052\076\167\106\uff98\001" +
    "\002\000\004\106\166\001\002\000\006\076\uff92\077\uff92" +
    "\001\002\000\014\027\037\105\047\107\043\110\045\111" +
    "\044\001\002\000\006\076\171\106\uff99\001\002\000\014" +
    "\027\037\105\047\107\043\110\045\111\044\001\002\000" +
    "\020\026\053\027\055\030\057\031\056\032\052\076\uff95" +
    "\106\uff95\001\002\000\020\026\053\027\055\030\057\031" +
    "\056\032\052\076\uff96\106\uff96\001\002\000\050\003\uffa4" +
    "\004\uffa4\010\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\036\uffa4\051\uffa4\061\uffa4\064\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\104\uffa4\111\uffa4\001\002\000" +
    "\056\003\uff77\004\uff77\010\uff77\020\uff77\021\uff77\022\uff77" +
    "\023\uff77\024\uff77\025\uff77\036\uff77\051\uff77\061\uff77\064" +
    "\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77" +
    "\073\uff77\104\uff77\111\uff77\001\002\000\004\111\177\001" +
    "\002\000\004\105\200\001\002\000\016\027\037\105\047" +
    "\106\uff97\107\043\110\045\111\044\001\002\000\004\106" +
    "\202\001\002\000\006\076\uff94\077\uff94\001\002\000\012" +
    "\065\uff64\066\uff64\067\uff64\104\uff64\001\002\000\004\077" +
    "\242\001\002\000\010\050\240\077\uffd3\106\uffd3\001\002" +
    "\000\040\026\053\027\055\030\057\031\056\032\052\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\077\uffd5\106\uffd5\001\002\000\012\047\uffcb\050" +
    "\uffcb\077\uffcb\106\uffcb\001\002\000\012\047\uffcd\050\uffcd" +
    "\077\uffcd\106\uffcd\001\002\000\016\040\223\041\224\042" +
    "\225\043\227\044\226\045\230\001\002\000\004\105\220" +
    "\001\002\000\012\047\215\050\uffcf\077\uffcf\106\uffcf\001" +
    "\002\000\026\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\047\uffd4\050\uffd4\077\uffd4\106\uffd4\001\002\000" +
    "\020\017\uffd2\027\uffd2\046\uffd2\105\uffd2\107\uffd2\110\uffd2" +
    "\111\uffd2\001\002\000\020\017\214\027\037\046\212\105" +
    "\047\107\043\110\045\111\044\001\002\000\012\047\215" +
    "\050\uffce\077\uffce\106\uffce\001\002\000\016\017\214\027" +
    "\037\105\047\107\043\110\045\111\044\001\002\000\004" +
    "\106\222\001\002\000\012\047\uffcc\050\uffcc\077\uffcc\106" +
    "\uffcc\001\002\000\016\017\214\027\037\105\047\107\043" +
    "\110\045\111\044\001\002\000\016\017\214\027\037\105" +
    "\047\107\043\110\045\111\044\001\002\000\016\017\214" +
    "\027\037\105\047\107\043\110\045\111\044\001\002\000" +
    "\016\017\214\027\037\105\047\107\043\110\045\111\044" +
    "\001\002\000\016\017\214\027\037\105\047\107\043\110" +
    "\045\111\044\001\002\000\016\017\214\027\037\105\047" +
    "\107\043\110\045\111\044\001\002\000\012\047\uffd6\050" +
    "\uffd6\077\uffd6\106\uffd6\001\002\000\012\047\uffd7\050\uffd7" +
    "\077\uffd7\106\uffd7\001\002\000\012\047\uffd8\050\uffd8\077" +
    "\uffd8\106\uffd8\001\002\000\012\047\uffd9\050\uffd9\077\uffd9" +
    "\106\uffd9\001\002\000\012\047\uffda\050\uffda\077\uffda\106" +
    "\uffda\001\002\000\012\047\uffdb\050\uffdb\077\uffdb\106\uffdb" +
    "\001\002\000\020\017\214\027\037\046\212\105\047\107" +
    "\043\110\045\111\044\001\002\000\020\017\uffd1\027\uffd1" +
    "\046\uffd1\105\uffd1\107\uffd1\110\uffd1\111\uffd1\001\002\000" +
    "\010\050\240\077\uffd0\106\uffd0\001\002\000\004\111\uffa1" +
    "\001\002\000\056\003\uff72\004\uff72\010\uff72\020\uff72\021" +
    "\uff72\022\uff72\023\uff72\024\uff72\025\uff72\036\uff72\051\uff72" +
    "\061\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071" +
    "\uff72\072\uff72\073\uff72\104\uff72\111\uff72\001\002\000\020" +
    "\017\214\027\037\046\212\105\047\107\043\110\045\111" +
    "\044\001\002\000\004\106\246\001\002\000\004\103\247" +
    "\001\002\000\050\003\uffa6\004\uffa6\010\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\036\uffa6\051\uffa6" +
    "\061\uffa6\064\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\104" +
    "\uffa6\111\uffa6\001\002\000\004\104\251\001\002\000\056" +
    "\003\uffa5\004\uffa5\010\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\025\uffa5\036\uffa5\051\uffa5\061\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\104\uffa5\111\uffa5\001\002\000\004\105\267\001\002" +
    "\000\060\003\uffb2\004\uffb2\010\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\036\uffb2\051\uffb2\061\uffb2" +
    "\063\262\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\104\uffb2\111\uffb2\001\002\000\062" +
    "\003\uffb3\004\uffb3\010\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\036\uffb3\051\uffb3\061\uffb3\062\252" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\104\uffb3\111\uffb3\001\002\000\050" +
    "\003\125\004\127\010\126\020\115\021\146\022\111\023" +
    "\022\024\031\025\032\036\110\051\107\061\122\064\132" +
    "\070\116\071\140\072\150\073\131\104\uff63\111\123\001" +
    "\002\000\004\104\257\001\002\000\062\003\uffb5\004\uffb5" +
    "\010\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\036\uffb5\051\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\104\uffb5\111\uffb5\001\002\000\060\003\uffb4\004\uffb4" +
    "\010\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\036\uffb4\051\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\104" +
    "\uffb4\111\uffb4\001\002\000\050\003\125\004\127\010\126" +
    "\020\115\021\146\022\111\023\022\024\031\025\032\036" +
    "\110\051\107\061\122\064\132\070\116\071\140\072\150" +
    "\073\131\104\uff63\111\123\001\002\000\004\103\264\001" +
    "\002\000\056\003\uffb1\004\uffb1\010\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\036\uffb1\051\uffb1\061" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\104\uffb1\111\uffb1\001\002\000\050\003" +
    "\uffb8\004\uffb8\010\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\036\uffb8\051\uffb8\061\uffb8\064\uffb8\070" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\104\uffb8\111\uffb8\001\002" +
    "\000\004\104\266\001\002\000\056\003\uffb6\004\uffb6\010" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\036\uffb6\051\uffb6\061\uffb6\064\uffb6\065\uffb6\066\uffb6\067" +
    "\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\104\uffb6\111\uffb6" +
    "\001\002\000\020\017\214\027\037\046\212\105\047\107" +
    "\043\110\045\111\044\001\002\000\004\106\271\001\002" +
    "\000\004\103\272\001\002\000\050\003\uffb9\004\uffb9\010" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\036\uffb9\051\uffb9\061\uffb9\064\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\104\uffb9\111\uffb9\001\002\000\016\017\050" +
    "\027\037\105\047\107\043\110\045\111\044\001\002\000" +
    "\004\106\275\001\002\000\004\103\276\001\002\000\004" +
    "\065\uffb0\001\002\000\004\074\300\001\002\000\154\010" +
    "\343\020\322\021\371\022\307\023\317\024\365\025\304" +
    "\027\344\030\306\031\332\035\327\036\303\040\337\041" +
    "\312\042\345\043\355\044\370\045\364\046\326\047\325" +
    "\050\331\051\302\052\341\053\330\054\350\055\310\056" +
    "\347\057\333\060\305\061\334\062\335\063\356\064\353" +
    "\065\311\066\363\067\346\070\323\071\361\072\372\073" +
    "\351\075\357\077\336\100\315\101\324\102\321\103\320" +
    "\104\316\105\362\106\360\107\301\110\354\111\340\112" +
    "\352\001\002\000\156\010\uff32\020\uff32\021\uff32\022\uff32" +
    "\023\uff32\024\uff32\025\uff32\027\uff32\030\uff32\031\uff32\035" +
    "\uff32\036\uff32\040\uff32\041\uff32\042\uff32\043\uff32\044\uff32" +
    "\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053" +
    "\uff32\054\uff32\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32" +
    "\062\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32\070" +
    "\uff32\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\077\uff32" +
    "\100\uff32\101\uff32\102\uff32\103\uff32\104\uff32\105\uff32\106" +
    "\uff32\107\uff32\110\uff32\111\uff32\112\uff32\001\002\000\156" +
    "\010\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025" +
    "\uff4b\027\uff4b\030\uff4b\031\uff4b\035\uff4b\036\uff4b\040\uff4b" +
    "\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046\uff4b\047" +
    "\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b\055\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064" +
    "\uff4b\065\uff4b\066\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b" +
    "\073\uff4b\074\uff4b\075\uff4b\077\uff4b\100\uff4b\101\uff4b\102" +
    "\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\107\uff4b\110\uff4b" +
    "\111\uff4b\112\uff4b\001\002\000\156\010\uff59\020\uff59\021" +
    "\uff59\022\uff59\023\uff59\024\uff59\025\uff59\027\uff59\030\uff59" +
    "\031\uff59\035\uff59\036\uff59\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\052\uff59\053\uff59\054\uff59\055\uff59\056\uff59\057\uff59\060" +
    "\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066\uff59" +
    "\067\uff59\070\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075" +
    "\uff59\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59\104\uff59" +
    "\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59\001" +
    "\002\000\156\010\uff5b\020\uff5b\021\uff5b\022\uff5b\023\uff5b" +
    "\024\uff5b\025\uff5b\027\uff5b\030\uff5b\031\uff5b\035\uff5b\036" +
    "\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b\045\uff5b" +
    "\046\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b\053\uff5b\054" +
    "\uff5b\055\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b" +
    "\063\uff5b\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071" +
    "\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\077\uff5b\100\uff5b" +
    "\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107" +
    "\uff5b\110\uff5b\111\uff5b\112\uff5b\001\002\000\156\010\uff47" +
    "\020\uff47\021\uff47\022\uff47\023\uff47\024\uff47\025\uff47\027" +
    "\uff47\030\uff47\031\uff47\035\uff47\036\uff47\040\uff47\041\uff47" +
    "\042\uff47\043\uff47\044\uff47\045\uff47\046\uff47\047\uff47\050" +
    "\uff47\051\uff47\052\uff47\053\uff47\054\uff47\055\uff47\056\uff47" +
    "\057\uff47\060\uff47\061\uff47\062\uff47\063\uff47\064\uff47\065" +
    "\uff47\066\uff47\067\uff47\070\uff47\071\uff47\072\uff47\073\uff47" +
    "\074\uff47\075\uff47\077\uff47\100\uff47\101\uff47\102\uff47\103" +
    "\uff47\104\uff47\105\uff47\106\uff47\107\uff47\110\uff47\111\uff47" +
    "\112\uff47\001\002\000\156\010\uff57\020\uff57\021\uff57\022" +
    "\uff57\023\uff57\024\uff57\025\uff57\027\uff57\030\uff57\031\uff57" +
    "\035\uff57\036\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052\uff57" +
    "\053\uff57\054\uff57\055\uff57\056\uff57\057\uff57\060\uff57\061" +
    "\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\075\uff57\077" +
    "\uff57\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57" +
    "\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57\001\002\000" +
    "\156\010\uff5e\020\uff5e\021\uff5e\022\uff5e\023\uff5e\024\uff5e" +
    "\025\uff5e\027\uff5e\030\uff5e\031\uff5e\035\uff5e\036\uff5e\040" +
    "\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e" +
    "\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e" +
    "\064\uff5e\065\uff5e\066\uff5e\067\uff5e\070\uff5e\071\uff5e\072" +
    "\uff5e\073\uff5e\074\uff5e\075\uff5e\077\uff5e\100\uff5e\101\uff5e" +
    "\102\uff5e\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\110" +
    "\uff5e\111\uff5e\112\uff5e\001\002\000\156\010\uff4a\020\uff4a" +
    "\021\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\027\uff4a\030" +
    "\uff4a\031\uff4a\035\uff4a\036\uff4a\040\uff4a\041\uff4a\042\uff4a" +
    "\043\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051" +
    "\uff4a\052\uff4a\053\uff4a\054\uff4a\055\uff4a\056\uff4a\057\uff4a" +
    "\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066" +
    "\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a\074\uff4a" +
    "\075\uff4a\077\uff4a\100\uff4a\101\uff4a\102\uff4a\103\uff4a\104" +
    "\uff4a\105\uff4a\106\uff4a\107\uff4a\110\uff4a\111\uff4a\112\uff4a" +
    "\001\002\000\156\010\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\024\uff42\025\uff42\027\uff42\030\uff42\031\uff42\035\uff42" +
    "\036\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42" +
    "\054\uff42\055\uff42\056\uff42\057\uff42\060\uff42\061\uff42\062" +
    "\uff42\063\uff42\064\uff42\065\uff42\066\uff42\067\uff42\070\uff42" +
    "\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42\077\uff42\100" +
    "\uff42\101\uff42\102\uff42\103\uff42\104\uff42\105\uff42\106\uff42" +
    "\107\uff42\110\uff42\111\uff42\112\uff42\001\002\000\156\010" +
    "\uff53\020\uff53\021\uff53\022\uff53\023\uff53\024\uff53\025\uff53" +
    "\027\uff53\030\uff53\031\uff53\035\uff53\036\uff53\040\uff53\041" +
    "\uff53\042\uff53\043\uff53\044\uff53\045\uff53\046\uff53\047\uff53" +
    "\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53\055\uff53\056" +
    "\uff53\057\uff53\060\uff53\061\uff53\062\uff53\063\uff53\064\uff53" +
    "\065\uff53\066\uff53\067\uff53\070\uff53\071\uff53\072\uff53\073" +
    "\uff53\074\uff53\075\uff53\077\uff53\100\uff53\101\uff53\102\uff53" +
    "\103\uff53\104\uff53\105\uff53\106\uff53\107\uff53\110\uff53\111" +
    "\uff53\112\uff53\001\002\000\156\010\343\020\322\021\371" +
    "\022\307\023\317\024\365\025\304\027\344\030\306\031" +
    "\332\035\327\036\303\040\337\041\312\042\345\043\355" +
    "\044\370\045\364\046\326\047\325\050\331\051\302\052" +
    "\341\053\330\054\350\055\310\056\347\057\333\060\305" +
    "\061\334\062\335\063\356\064\353\065\311\066\363\067" +
    "\346\070\323\071\361\072\372\073\351\074\u0100\075\357" +
    "\077\336\100\315\101\324\102\321\103\320\104\316\105" +
    "\362\106\360\107\301\110\354\111\340\112\352\001\002" +
    "\000\156\010\uff87\020\uff87\021\uff87\022\uff87\023\uff87\024" +
    "\uff87\025\uff87\027\uff87\030\uff87\031\uff87\035\uff87\036\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87" +
    "\072\uff87\073\uff87\074\uff87\075\uff87\077\uff87\100\uff87\101" +
    "\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107\uff87" +
    "\110\uff87\111\uff87\112\uff87\001\002\000\156\010\uff39\020" +
    "\uff39\021\uff39\022\uff39\023\uff39\024\uff39\025\uff39\027\uff39" +
    "\030\uff39\031\uff39\035\uff39\036\uff39\040\uff39\041\uff39\042" +
    "\uff39\043\uff39\044\uff39\045\uff39\046\uff39\047\uff39\050\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\055\uff39\056\uff39\057" +
    "\uff39\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39" +
    "\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074" +
    "\uff39\075\uff39\077\uff39\100\uff39\101\uff39\102\uff39\103\uff39" +
    "\104\uff39\105\uff39\106\uff39\107\uff39\110\uff39\111\uff39\112" +
    "\uff39\001\002\000\156\010\uff35\020\uff35\021\uff35\022\uff35" +
    "\023\uff35\024\uff35\025\uff35\027\uff35\030\uff35\031\uff35\035" +
    "\uff35\036\uff35\040\uff35\041\uff35\042\uff35\043\uff35\044\uff35" +
    "\045\uff35\046\uff35\047\uff35\050\uff35\051\uff35\052\uff35\053" +
    "\uff35\054\uff35\055\uff35\056\uff35\057\uff35\060\uff35\061\uff35" +
    "\062\uff35\063\uff35\064\uff35\065\uff35\066\uff35\067\uff35\070" +
    "\uff35\071\uff35\072\uff35\073\uff35\074\uff35\075\uff35\077\uff35" +
    "\100\uff35\101\uff35\102\uff35\103\uff35\104\uff35\105\uff35\106" +
    "\uff35\107\uff35\110\uff35\111\uff35\112\uff35\001\002\000\156" +
    "\010\uff5d\020\uff5d\021\uff5d\022\uff5d\023\uff5d\024\uff5d\025" +
    "\uff5d\027\uff5d\030\uff5d\031\uff5d\035\uff5d\036\uff5d\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047" +
    "\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d\054\uff5d\055\uff5d" +
    "\056\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064" +
    "\uff5d\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d" +
    "\073\uff5d\074\uff5d\075\uff5d\077\uff5d\100\uff5d\101\uff5d\102" +
    "\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\110\uff5d" +
    "\111\uff5d\112\uff5d\001\002\000\156\010\uff36\020\uff36\021" +
    "\uff36\022\uff36\023\uff36\024\uff36\025\uff36\027\uff36\030\uff36" +
    "\031\uff36\035\uff36\036\uff36\040\uff36\041\uff36\042\uff36\043" +
    "\uff36\044\uff36\045\uff36\046\uff36\047\uff36\050\uff36\051\uff36" +
    "\052\uff36\053\uff36\054\uff36\055\uff36\056\uff36\057\uff36\060" +
    "\uff36\061\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066\uff36" +
    "\067\uff36\070\uff36\071\uff36\072\uff36\073\uff36\074\uff36\075" +
    "\uff36\077\uff36\100\uff36\101\uff36\102\uff36\103\uff36\104\uff36" +
    "\105\uff36\106\uff36\107\uff36\110\uff36\111\uff36\112\uff36\001" +
    "\002\000\156\010\uff37\020\uff37\021\uff37\022\uff37\023\uff37" +
    "\024\uff37\025\uff37\027\uff37\030\uff37\031\uff37\035\uff37\036" +
    "\uff37\040\uff37\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37" +
    "\046\uff37\047\uff37\050\uff37\051\uff37\052\uff37\053\uff37\054" +
    "\uff37\055\uff37\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37" +
    "\063\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37\071" +
    "\uff37\072\uff37\073\uff37\074\uff37\075\uff37\077\uff37\100\uff37" +
    "\101\uff37\102\uff37\103\uff37\104\uff37\105\uff37\106\uff37\107" +
    "\uff37\110\uff37\111\uff37\112\uff37\001\002\000\156\010\uff60" +
    "\020\uff60\021\uff60\022\uff60\023\uff60\024\uff60\025\uff60\027" +
    "\uff60\030\uff60\031\uff60\035\uff60\036\uff60\040\uff60\041\uff60" +
    "\042\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050" +
    "\uff60\051\uff60\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60" +
    "\057\uff60\060\uff60\061\uff60\062\uff60\063\uff60\064\uff60\065" +
    "\uff60\066\uff60\067\uff60\070\uff60\071\uff60\072\uff60\073\uff60" +
    "\074\uff60\075\uff60\077\uff60\100\uff60\101\uff60\102\uff60\103" +
    "\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110\uff60\111\uff60" +
    "\112\uff60\001\002\000\156\010\uff3f\020\uff3f\021\uff3f\022" +
    "\uff3f\023\uff3f\024\uff3f\025\uff3f\027\uff3f\030\uff3f\031\uff3f" +
    "\035\uff3f\036\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\044" +
    "\uff3f\045\uff3f\046\uff3f\047\uff3f\050\uff3f\051\uff3f\052\uff3f" +
    "\053\uff3f\054\uff3f\055\uff3f\056\uff3f\057\uff3f\060\uff3f\061" +
    "\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f" +
    "\070\uff3f\071\uff3f\072\uff3f\073\uff3f\074\uff3f\075\uff3f\077" +
    "\uff3f\100\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f" +
    "\106\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\001\002\000" +
    "\156\010\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38" +
    "\025\uff38\027\uff38\030\uff38\031\uff38\035\uff38\036\uff38\040" +
    "\uff38\041\uff38\042\uff38\043\uff38\044\uff38\045\uff38\046\uff38" +
    "\047\uff38\050\uff38\051\uff38\052\uff38\053\uff38\054\uff38\055" +
    "\uff38\056\uff38\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38" +
    "\064\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072" +
    "\uff38\073\uff38\074\uff38\075\uff38\077\uff38\100\uff38\101\uff38" +
    "\102\uff38\103\uff38\104\uff38\105\uff38\106\uff38\107\uff38\110" +
    "\uff38\111\uff38\112\uff38\001\002\000\156\010\uff4d\020\uff4d" +
    "\021\uff4d\022\uff4d\023\uff4d\024\uff4d\025\uff4d\027\uff4d\030" +
    "\uff4d\031\uff4d\035\uff4d\036\uff4d\040\uff4d\041\uff4d\042\uff4d" +
    "\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051" +
    "\uff4d\052\uff4d\053\uff4d\054\uff4d\055\uff4d\056\uff4d\057\uff4d" +
    "\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066" +
    "\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073\uff4d\074\uff4d" +
    "\075\uff4d\077\uff4d\100\uff4d\101\uff4d\102\uff4d\103\uff4d\104" +
    "\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d" +
    "\001\002\000\156\010\uff4e\020\uff4e\021\uff4e\022\uff4e\023" +
    "\uff4e\024\uff4e\025\uff4e\027\uff4e\030\uff4e\031\uff4e\035\uff4e" +
    "\036\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045" +
    "\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e" +
    "\054\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061\uff4e\062" +
    "\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e\070\uff4e" +
    "\071\uff4e\072\uff4e\073\uff4e\074\uff4e\075\uff4e\077\uff4e\100" +
    "\uff4e\101\uff4e\102\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e" +
    "\107\uff4e\110\uff4e\111\uff4e\112\uff4e\001\002\000\156\010" +
    "\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55\025\uff55" +
    "\027\uff55\030\uff55\031\uff55\035\uff55\036\uff55\040\uff55\041" +
    "\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046\uff55\047\uff55" +
    "\050\uff55\051\uff55\052\uff55\053\uff55\054\uff55\055\uff55\056" +
    "\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063\uff55\064\uff55" +
    "\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072\uff55\073" +
    "\uff55\074\uff55\075\uff55\077\uff55\100\uff55\101\uff55\102\uff55" +
    "\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110\uff55\111" +
    "\uff55\112\uff55\001\002\000\156\010\uff83\020\uff83\021\uff83" +
    "\022\uff83\023\uff83\024\uff83\025\uff83\027\uff83\030\uff83\031" +
    "\uff83\035\uff83\036\uff83\040\uff83\041\uff83\042\uff83\043\uff83" +
    "\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052" +
    "\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83" +
    "\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83\066\uff83\067" +
    "\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075\uff83" +
    "\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112\uff83\001\002" +
    "\000\156\010\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024" +
    "\uff4c\025\uff4c\027\uff4c\030\uff4c\031\uff4c\035\uff4c\036\uff4c" +
    "\040\uff4c\041\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c" +
    "\055\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063" +
    "\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c" +
    "\072\uff4c\073\uff4c\074\uff4c\075\uff4c\077\uff4c\100\uff4c\101" +
    "\uff4c\102\uff4c\103\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c" +
    "\110\uff4c\111\uff4c\112\uff4c\001\002\000\156\010\uff56\020" +
    "\uff56\021\uff56\022\uff56\023\uff56\024\uff56\025\uff56\027\uff56" +
    "\030\uff56\031\uff56\035\uff56\036\uff56\040\uff56\041\uff56\042" +
    "\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\052\uff56\053\uff56\054\uff56\055\uff56\056\uff56\057" +
    "\uff56\060\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56" +
    "\066\uff56\067\uff56\070\uff56\071\uff56\072\uff56\073\uff56\074" +
    "\uff56\075\uff56\077\uff56\100\uff56\101\uff56\102\uff56\103\uff56" +
    "\104\uff56\105\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112" +
    "\uff56\001\002\000\156\010\uff48\020\uff48\021\uff48\022\uff48" +
    "\023\uff48\024\uff48\025\uff48\027\uff48\030\uff48\031\uff48\035" +
    "\uff48\036\uff48\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48" +
    "\045\uff48\046\uff48\047\uff48\050\uff48\051\uff48\052\uff48\053" +
    "\uff48\054\uff48\055\uff48\056\uff48\057\uff48\060\uff48\061\uff48" +
    "\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067\uff48\070" +
    "\uff48\071\uff48\072\uff48\073\uff48\074\uff48\075\uff48\077\uff48" +
    "\100\uff48\101\uff48\102\uff48\103\uff48\104\uff48\105\uff48\106" +
    "\uff48\107\uff48\110\uff48\111\uff48\112\uff48\001\002\000\156" +
    "\010\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46\025" +
    "\uff46\027\uff46\030\uff46\031\uff46\035\uff46\036\uff46\040\uff46" +
    "\041\uff46\042\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047" +
    "\uff46\050\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055\uff46" +
    "\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\064" +
    "\uff46\065\uff46\066\uff46\067\uff46\070\uff46\071\uff46\072\uff46" +
    "\073\uff46\074\uff46\075\uff46\077\uff46\100\uff46\101\uff46\102" +
    "\uff46\103\uff46\104\uff46\105\uff46\106\uff46\107\uff46\110\uff46" +
    "\111\uff46\112\uff46\001\002\000\156\010\uff45\020\uff45\021" +
    "\uff45\022\uff45\023\uff45\024\uff45\025\uff45\027\uff45\030\uff45" +
    "\031\uff45\035\uff45\036\uff45\040\uff45\041\uff45\042\uff45\043" +
    "\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050\uff45\051\uff45" +
    "\052\uff45\053\uff45\054\uff45\055\uff45\056\uff45\057\uff45\060" +
    "\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45\066\uff45" +
    "\067\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075" +
    "\uff45\077\uff45\100\uff45\101\uff45\102\uff45\103\uff45\104\uff45" +
    "\105\uff45\106\uff45\107\uff45\110\uff45\111\uff45\112\uff45\001" +
    "\002\000\156\010\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a" +
    "\024\uff3a\025\uff3a\027\uff3a\030\uff3a\031\uff3a\035\uff3a\036" +
    "\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\045\uff3a" +
    "\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052\uff3a\053\uff3a\054" +
    "\uff3a\055\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a" +
    "\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a\071" +
    "\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\077\uff3a\100\uff3a" +
    "\101\uff3a\102\uff3a\103\uff3a\104\uff3a\105\uff3a\106\uff3a\107" +
    "\uff3a\110\uff3a\111\uff3a\112\uff3a\001\002\000\156\010\uff54" +
    "\020\uff54\021\uff54\022\uff54\023\uff54\024\uff54\025\uff54\027" +
    "\uff54\030\uff54\031\uff54\035\uff54\036\uff54\040\uff54\041\uff54" +
    "\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\054\uff54\055\uff54\056\uff54" +
    "\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54\064\uff54\065" +
    "\uff54\066\uff54\067\uff54\070\uff54\071\uff54\072\uff54\073\uff54" +
    "\074\uff54\075\uff54\077\uff54\100\uff54\101\uff54\102\uff54\103" +
    "\uff54\104\uff54\105\uff54\106\uff54\107\uff54\110\uff54\111\uff54" +
    "\112\uff54\001\002\000\156\010\uff30\020\uff30\021\uff30\022" +
    "\uff30\023\uff30\024\uff30\025\uff30\027\uff30\030\uff30\031\uff30" +
    "\035\uff30\036\uff30\040\uff30\041\uff30\042\uff30\043\uff30\044" +
    "\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30\052\uff30" +
    "\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\060\uff30\061" +
    "\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067\uff30" +
    "\070\uff30\071\uff30\072\uff30\073\uff30\074\uff30\075\uff30\077" +
    "\uff30\100\uff30\101\uff30\102\uff30\103\uff30\104\uff30\105\uff30" +
    "\106\uff30\107\uff30\110\uff30\111\uff30\112\uff30\001\002\000" +
    "\156\010\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024\uff84" +
    "\025\uff84\027\uff84\030\uff84\031\uff84\035\uff84\036\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055" +
    "\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84" +
    "\064\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\075\uff84\077\uff84\100\uff84\101\uff84" +
    "\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110" +
    "\uff84\111\uff84\112\uff84\001\002\000\156\010\uff85\020\uff85" +
    "\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\027\uff85\030" +
    "\uff85\031\uff85\035\uff85\036\uff85\040\uff85\041\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051" +
    "\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85" +
    "\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066" +
    "\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074\uff85" +
    "\075\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104" +
    "\uff85\105\uff85\106\uff85\107\uff85\110\uff85\111\uff85\112\uff85" +
    "\001\002\000\156\010\uff5a\020\uff5a\021\uff5a\022\uff5a\023" +
    "\uff5a\024\uff5a\025\uff5a\027\uff5a\030\uff5a\031\uff5a\035\uff5a" +
    "\036\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a" +
    "\054\uff5a\055\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062" +
    "\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a" +
    "\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\077\uff5a\100" +
    "\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a" +
    "\107\uff5a\110\uff5a\111\uff5a\112\uff5a\001\002\000\156\010" +
    "\uff58\020\uff58\021\uff58\022\uff58\023\uff58\024\uff58\025\uff58" +
    "\027\uff58\030\uff58\031\uff58\035\uff58\036\uff58\040\uff58\041" +
    "\uff58\042\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58" +
    "\050\uff58\051\uff58\052\uff58\053\uff58\054\uff58\055\uff58\056" +
    "\uff58\057\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58" +
    "\065\uff58\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58\073" +
    "\uff58\074\uff58\075\uff58\077\uff58\100\uff58\101\uff58\102\uff58" +
    "\103\uff58\104\uff58\105\uff58\106\uff58\107\uff58\110\uff58\111" +
    "\uff58\112\uff58\001\002\000\156\010\uff52\020\uff52\021\uff52" +
    "\022\uff52\023\uff52\024\uff52\025\uff52\027\uff52\030\uff52\031" +
    "\uff52\035\uff52\036\uff52\040\uff52\041\uff52\042\uff52\043\uff52" +
    "\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052" +
    "\uff52\053\uff52\054\uff52\055\uff52\056\uff52\057\uff52\060\uff52" +
    "\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066\uff52\067" +
    "\uff52\070\uff52\071\uff52\072\uff52\073\uff52\074\uff52\075\uff52" +
    "\077\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105" +
    "\uff52\106\uff52\107\uff52\110\uff52\111\uff52\112\uff52\001\002" +
    "\000\156\010\uff40\020\uff40\021\uff40\022\uff40\023\uff40\024" +
    "\uff40\025\uff40\027\uff40\030\uff40\031\uff40\035\uff40\036\uff40" +
    "\040\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046" +
    "\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\054\uff40" +
    "\055\uff40\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\063" +
    "\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070\uff40\071\uff40" +
    "\072\uff40\073\uff40\074\uff40\075\uff40\077\uff40\100\uff40\101" +
    "\uff40\102\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107\uff40" +
    "\110\uff40\111\uff40\112\uff40\001\002\000\156\010\uff49\020" +
    "\uff49\021\uff49\022\uff49\023\uff49\024\uff49\025\uff49\027\uff49" +
    "\030\uff49\031\uff49\035\uff49\036\uff49\040\uff49\041\uff49\042" +
    "\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\050\uff49" +
    "\051\uff49\052\uff49\053\uff49\054\uff49\055\uff49\056\uff49\057" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49" +
    "\066\uff49\067\uff49\070\uff49\071\uff49\072\uff49\073\uff49\074" +
    "\uff49\075\uff49\077\uff49\100\uff49\101\uff49\102\uff49\103\uff49" +
    "\104\uff49\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49\112" +
    "\uff49\001\002\000\156\010\uff82\020\uff82\021\uff82\022\uff82" +
    "\023\uff82\024\uff82\025\uff82\027\uff82\030\uff82\031\uff82\035" +
    "\uff82\036\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82" +
    "\062\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070" +
    "\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\077\uff82" +
    "\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82\106" +
    "\uff82\107\uff82\110\uff82\111\uff82\112\uff82\001\002\000\156" +
    "\010\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025" +
    "\uff3c\027\uff3c\030\uff3c\031\uff3c\035\uff3c\036\uff3c\040\uff3c" +
    "\041\uff3c\042\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047" +
    "\uff3c\050\uff3c\051\uff3c\052\uff3c\053\uff3c\054\uff3c\055\uff3c" +
    "\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064" +
    "\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c\072\uff3c" +
    "\073\uff3c\074\uff3c\075\uff3c\077\uff3c\100\uff3c\101\uff3c\102" +
    "\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\110\uff3c" +
    "\111\uff3c\112\uff3c\001\002\000\156\010\uff2f\020\uff2f\021" +
    "\uff2f\022\uff2f\023\uff2f\024\uff2f\025\uff2f\027\uff2f\030\uff2f" +
    "\031\uff2f\035\uff2f\036\uff2f\040\uff2f\041\uff2f\042\uff2f\043" +
    "\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f\051\uff2f" +
    "\052\uff2f\053\uff2f\054\uff2f\055\uff2f\056\uff2f\057\uff2f\060" +
    "\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f\066\uff2f" +
    "\067\uff2f\070\uff2f\071\uff2f\072\uff2f\073\uff2f\074\uff2f\075" +
    "\uff2f\077\uff2f\100\uff2f\101\uff2f\102\uff2f\103\uff2f\104\uff2f" +
    "\105\uff2f\106\uff2f\107\uff2f\110\uff2f\111\uff2f\112\uff2f\001" +
    "\002\000\156\010\uff43\020\uff43\021\uff43\022\uff43\023\uff43" +
    "\024\uff43\025\uff43\027\uff43\030\uff43\031\uff43\035\uff43\036" +
    "\uff43\040\uff43\041\uff43\042\uff43\043\uff43\044\uff43\045\uff43" +
    "\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43\053\uff43\054" +
    "\uff43\055\uff43\056\uff43\057\uff43\060\uff43\061\uff43\062\uff43" +
    "\063\uff43\064\uff43\065\uff43\066\uff43\067\uff43\070\uff43\071" +
    "\uff43\072\uff43\073\uff43\074\uff43\075\uff43\077\uff43\100\uff43" +
    "\101\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\107" +
    "\uff43\110\uff43\111\uff43\112\uff43\001\002\000\156\010\uff31" +
    "\020\uff31\021\uff31\022\uff31\023\uff31\024\uff31\025\uff31\027" +
    "\uff31\030\uff31\031\uff31\035\uff31\036\uff31\040\uff31\041\uff31" +
    "\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31\047\uff31\050" +
    "\uff31\051\uff31\052\uff31\053\uff31\054\uff31\055\uff31\056\uff31" +
    "\057\uff31\060\uff31\061\uff31\062\uff31\063\uff31\064\uff31\065" +
    "\uff31\066\uff31\067\uff31\070\uff31\071\uff31\072\uff31\073\uff31" +
    "\074\uff31\075\uff31\077\uff31\100\uff31\101\uff31\102\uff31\103" +
    "\uff31\104\uff31\105\uff31\106\uff31\107\uff31\110\uff31\111\uff31" +
    "\112\uff31\001\002\000\156\010\uff51\020\uff51\021\uff51\022" +
    "\uff51\023\uff51\024\uff51\025\uff51\027\uff51\030\uff51\031\uff51" +
    "\035\uff51\036\uff51\040\uff51\041\uff51\042\uff51\043\uff51\044" +
    "\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\052\uff51" +
    "\053\uff51\054\uff51\055\uff51\056\uff51\057\uff51\060\uff51\061" +
    "\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\067\uff51" +
    "\070\uff51\071\uff51\072\uff51\073\uff51\074\uff51\075\uff51\077" +
    "\uff51\100\uff51\101\uff51\102\uff51\103\uff51\104\uff51\105\uff51" +
    "\106\uff51\107\uff51\110\uff51\111\uff51\112\uff51\001\002\000" +
    "\156\010\uff44\020\uff44\021\uff44\022\uff44\023\uff44\024\uff44" +
    "\025\uff44\027\uff44\030\uff44\031\uff44\035\uff44\036\uff44\040" +
    "\uff44\041\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44" +
    "\047\uff44\050\uff44\051\uff44\052\uff44\053\uff44\054\uff44\055" +
    "\uff44\056\uff44\057\uff44\060\uff44\061\uff44\062\uff44\063\uff44" +
    "\064\uff44\065\uff44\066\uff44\067\uff44\070\uff44\071\uff44\072" +
    "\uff44\073\uff44\074\uff44\075\uff44\077\uff44\100\uff44\101\uff44" +
    "\102\uff44\103\uff44\104\uff44\105\uff44\106\uff44\107\uff44\110" +
    "\uff44\111\uff44\112\uff44\001\002\000\156\010\uff3b\020\uff3b" +
    "\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\027\uff3b\030" +
    "\uff3b\031\uff3b\035\uff3b\036\uff3b\040\uff3b\041\uff3b\042\uff3b" +
    "\043\uff3b\044\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051" +
    "\uff3b\052\uff3b\053\uff3b\054\uff3b\055\uff3b\056\uff3b\057\uff3b" +
    "\060\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b\066" +
    "\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b\073\uff3b\074\uff3b" +
    "\075\uff3b\077\uff3b\100\uff3b\101\uff3b\102\uff3b\103\uff3b\104" +
    "\uff3b\105\uff3b\106\uff3b\107\uff3b\110\uff3b\111\uff3b\112\uff3b" +
    "\001\002\000\156\010\uff33\020\uff33\021\uff33\022\uff33\023" +
    "\uff33\024\uff33\025\uff33\027\uff33\030\uff33\031\uff33\035\uff33" +
    "\036\uff33\040\uff33\041\uff33\042\uff33\043\uff33\044\uff33\045" +
    "\uff33\046\uff33\047\uff33\050\uff33\051\uff33\052\uff33\053\uff33" +
    "\054\uff33\055\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062" +
    "\uff33\063\uff33\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33" +
    "\071\uff33\072\uff33\073\uff33\074\uff33\075\uff33\077\uff33\100" +
    "\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33\106\uff33" +
    "\107\uff33\110\uff33\111\uff33\112\uff33\001\002\000\156\010" +
    "\uff3e\020\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e" +
    "\027\uff3e\030\uff3e\031\uff3e\035\uff3e\036\uff3e\040\uff3e\041" +
    "\uff3e\042\uff3e\043\uff3e\044\uff3e\045\uff3e\046\uff3e\047\uff3e" +
    "\050\uff3e\051\uff3e\052\uff3e\053\uff3e\054\uff3e\055\uff3e\056" +
    "\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064\uff3e" +
    "\065\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073" +
    "\uff3e\074\uff3e\075\uff3e\077\uff3e\100\uff3e\101\uff3e\102\uff3e" +
    "\103\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\111" +
    "\uff3e\112\uff3e\001\002\000\156\010\uff34\020\uff34\021\uff34" +
    "\022\uff34\023\uff34\024\uff34\025\uff34\027\uff34\030\uff34\031" +
    "\uff34\035\uff34\036\uff34\040\uff34\041\uff34\042\uff34\043\uff34" +
    "\044\uff34\045\uff34\046\uff34\047\uff34\050\uff34\051\uff34\052" +
    "\uff34\053\uff34\054\uff34\055\uff34\056\uff34\057\uff34\060\uff34" +
    "\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34\067" +
    "\uff34\070\uff34\071\uff34\072\uff34\073\uff34\074\uff34\075\uff34" +
    "\077\uff34\100\uff34\101\uff34\102\uff34\103\uff34\104\uff34\105" +
    "\uff34\106\uff34\107\uff34\110\uff34\111\uff34\112\uff34\001\002" +
    "\000\156\010\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024" +
    "\uff41\025\uff41\027\uff41\030\uff41\031\uff41\035\uff41\036\uff41" +
    "\040\uff41\041\uff41\042\uff41\043\uff41\044\uff41\045\uff41\046" +
    "\uff41\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\054\uff41" +
    "\055\uff41\056\uff41\057\uff41\060\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41\071\uff41" +
    "\072\uff41\073\uff41\074\uff41\075\uff41\077\uff41\100\uff41\101" +
    "\uff41\102\uff41\103\uff41\104\uff41\105\uff41\106\uff41\107\uff41" +
    "\110\uff41\111\uff41\112\uff41\001\002\000\156\010\uff4f\020" +
    "\uff4f\021\uff4f\022\uff4f\023\uff4f\024\uff4f\025\uff4f\027\uff4f" +
    "\030\uff4f\031\uff4f\035\uff4f\036\uff4f\040\uff4f\041\uff4f\042" +
    "\uff4f\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f" +
    "\051\uff4f\052\uff4f\053\uff4f\054\uff4f\055\uff4f\056\uff4f\057" +
    "\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f" +
    "\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073\uff4f\074" +
    "\uff4f\075\uff4f\077\uff4f\100\uff4f\101\uff4f\102\uff4f\103\uff4f" +
    "\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110\uff4f\111\uff4f\112" +
    "\uff4f\001\002\000\156\010\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\023\uff5c\024\uff5c\025\uff5c\027\uff5c\030\uff5c\031\uff5c\035" +
    "\uff5c\036\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053" +
    "\uff5c\054\uff5c\055\uff5c\056\uff5c\057\uff5c\060\uff5c\061\uff5c" +
    "\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c\070" +
    "\uff5c\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\077\uff5c" +
    "\100\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106" +
    "\uff5c\107\uff5c\110\uff5c\111\uff5c\112\uff5c\001\002\000\156" +
    "\010\uff61\020\uff61\021\uff61\022\uff61\023\uff61\024\uff61\025" +
    "\uff61\027\uff61\030\uff61\031\uff61\035\uff61\036\uff61\040\uff61" +
    "\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047" +
    "\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055\uff61" +
    "\056\uff61\057\uff61\060\uff61\061\uff61\062\uff61\063\uff61\064" +
    "\uff61\065\uff61\066\uff61\067\uff61\070\uff61\071\uff61\072\uff61" +
    "\073\uff61\074\uff61\075\uff61\077\uff61\100\uff61\101\uff61\102" +
    "\uff61\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61\110\uff61" +
    "\111\uff61\112\uff61\001\002\000\156\010\343\020\322\021" +
    "\371\022\307\023\317\024\365\025\304\027\344\030\306" +
    "\031\332\035\327\036\303\040\337\041\312\042\345\043" +
    "\355\044\370\045\364\046\326\047\325\050\331\051\302" +
    "\052\341\053\330\054\350\055\310\056\347\057\333\060" +
    "\305\061\334\062\335\063\356\064\353\065\311\066\363" +
    "\067\346\070\323\071\361\072\372\073\351\074\374\075" +
    "\357\077\336\100\315\101\324\102\321\103\320\104\316" +
    "\105\362\106\360\107\301\110\354\111\340\112\352\001" +
    "\002\000\156\010\uff50\020\uff50\021\uff50\022\uff50\023\uff50" +
    "\024\uff50\025\uff50\027\uff50\030\uff50\031\uff50\035\uff50\036" +
    "\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50" +
    "\046\uff50\047\uff50\050\uff50\051\uff50\052\uff50\053\uff50\054" +
    "\uff50\055\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50\071" +
    "\uff50\072\uff50\073\uff50\074\uff50\075\uff50\077\uff50\100\uff50" +
    "\101\uff50\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\107" +
    "\uff50\110\uff50\111\uff50\112\uff50\001\002\000\156\010\uff5f" +
    "\020\uff5f\021\uff5f\022\uff5f\023\uff5f\024\uff5f\025\uff5f\027" +
    "\uff5f\030\uff5f\031\uff5f\035\uff5f\036\uff5f\040\uff5f\041\uff5f" +
    "\042\uff5f\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050" +
    "\uff5f\051\uff5f\052\uff5f\053\uff5f\054\uff5f\055\uff5f\056\uff5f" +
    "\057\uff5f\060\uff5f\061\uff5f\062\uff5f\063\uff5f\064\uff5f\065" +
    "\uff5f\066\uff5f\067\uff5f\070\uff5f\071\uff5f\072\uff5f\073\uff5f" +
    "\074\uff5f\075\uff5f\077\uff5f\100\uff5f\101\uff5f\102\uff5f\103" +
    "\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110\uff5f\111\uff5f" +
    "\112\uff5f\001\002\000\156\010\uff3d\020\uff3d\021\uff3d\022" +
    "\uff3d\023\uff3d\024\uff3d\025\uff3d\027\uff3d\030\uff3d\031\uff3d" +
    "\035\uff3d\036\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\044" +
    "\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d" +
    "\053\uff3d\054\uff3d\055\uff3d\056\uff3d\057\uff3d\060\uff3d\061" +
    "\uff3d\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d" +
    "\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074\uff3d\075\uff3d\077" +
    "\uff3d\100\uff3d\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d" +
    "\106\uff3d\107\uff3d\110\uff3d\111\uff3d\112\uff3d\001\002\000" +
    "\156\010\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\027\uff86\030\uff86\031\uff86\035\uff86\036\uff86\040" +
    "\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86" +
    "\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86" +
    "\064\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072" +
    "\uff86\073\uff86\074\uff86\075\uff86\077\uff86\100\uff86\101\uff86" +
    "\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86\107\uff86\110" +
    "\uff86\111\uff86\112\uff86\001\002\000\004\106\376\001\002" +
    "\000\156\010\uff62\020\uff62\021\uff62\022\uff62\023\uff62\024" +
    "\uff62\025\uff62\027\uff62\030\uff62\031\uff62\035\uff62\036\uff62" +
    "\040\uff62\041\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046" +
    "\uff62\047\uff62\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62" +
    "\055\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062\uff62\063" +
    "\uff62\064\uff62\065\uff62\066\uff62\067\uff62\070\uff62\071\uff62" +
    "\072\uff62\073\uff62\074\uff62\075\uff62\077\uff62\100\uff62\101" +
    "\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62" +
    "\110\uff62\111\uff62\112\uff62\001\002\000\004\077\uff80\001" +
    "\002\000\156\010\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\025\uff88\027\uff88\030\uff88\031\uff88\035\uff88\036" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88" +
    "\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071" +
    "\uff88\072\uff88\073\uff88\074\uff88\075\uff88\077\uff88\100\uff88" +
    "\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107" +
    "\uff88\110\uff88\111\uff88\112\uff88\001\002\000\004\076\u0102" +
    "\001\002\000\154\010\343\020\322\021\371\022\307\023" +
    "\317\024\365\025\304\027\344\030\306\031\332\035\327" +
    "\036\303\040\337\041\312\042\345\043\355\044\370\045" +
    "\364\046\326\047\325\050\331\051\302\052\341\053\330" +
    "\054\350\055\310\056\347\057\333\060\305\061\334\062" +
    "\335\063\356\064\353\065\311\066\363\067\346\070\323" +
    "\071\361\072\372\073\351\075\357\077\336\100\315\101" +
    "\324\102\321\103\320\104\316\105\362\106\360\107\301" +
    "\110\354\111\340\112\352\001\002\000\006\037\u0103\111" +
    "\u0104\001\002\000\004\111\u0110\001\002\000\006\076\u0107" +
    "\106\uff7f\001\002\000\004\106\u0106\001\002\000\004\077" +
    "\uff81\001\002\000\006\037\u010d\111\u010e\001\002\000\006" +
    "\076\u0109\106\uff7e\001\002\000\006\037\u010a\111\u010b\001" +
    "\002\000\004\111\u010c\001\002\000\006\076\uff7a\106\uff7a" +
    "\001\002\000\006\076\uff78\106\uff78\001\002\000\004\111" +
    "\u010f\001\002\000\006\076\uff7b\106\uff7b\001\002\000\006" +
    "\076\uff79\106\uff79\001\002\000\006\076\u0107\106\uff7d\001" +
    "\002\000\006\076\u0109\106\uff7c\001\002\000\004\104\u0113" +
    "\001\002\000\062\003\uffb7\004\uffb7\010\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\036\uffb7\051\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067" +
    "\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7\104\uffb7\111\uffb7" +
    "\001\002\000\004\106\u0115\001\002\000\004\077\u0116\001" +
    "\002\000\056\003\uff67\004\uff67\010\uff67\020\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\025\uff67\036\uff67\051\uff67\061" +
    "\uff67\064\uff67\065\uff67\066\uff67\067\uff67\070\uff67\071\uff67" +
    "\072\uff67\073\uff67\104\uff67\111\uff67\001\002\000\056\003" +
    "\uff69\004\uff69\010\uff69\020\uff69\021\uff69\022\uff69\023\uff69" +
    "\024\uff69\025\uff69\036\uff69\051\uff69\061\uff69\064\uff69\065" +
    "\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69" +
    "\104\uff69\111\uff69\001\002\000\056\003\uff68\004\uff68\010" +
    "\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68" +
    "\036\uff68\051\uff68\061\uff68\064\uff68\065\uff68\066\uff68\067" +
    "\uff68\070\uff68\071\uff68\072\uff68\073\uff68\104\uff68\111\uff68" +
    "\001\002\000\004\002\000\001\002\000\026\010\u011c\017" +
    "\050\020\115\021\146\022\153\027\037\105\047\107\043" +
    "\110\045\111\044\001\002\000\004\077\uffc1\001\002\000" +
    "\004\105\u011d\001\002\000\004\106\u011e\001\002\000\004" +
    "\077\u011f\001\002\000\056\003\uff65\004\uff65\010\uff65\020" +
    "\uff65\021\uff65\022\uff65\023\uff65\024\uff65\025\uff65\036\uff65" +
    "\051\uff65\061\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070" +
    "\uff65\071\uff65\072\uff65\073\uff65\104\uff65\111\uff65\001\002" +
    "\000\020\017\214\027\037\046\212\105\047\107\043\110" +
    "\045\111\044\001\002\000\004\106\u0122\001\002\000\004" +
    "\103\u0123\001\002\000\050\003\uffba\004\uffba\010\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\036\uffba" +
    "\051\uffba\061\uffba\064\uffba\070\uffba\071\uffba\072\uffba\073" +
    "\uffba\104\uffba\111\uffba\001\002\000\056\003\uff6b\004\uff6b" +
    "\010\uff6b\020\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\036\uff6b\051\uff6b\061\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b\104\uff6b\111" +
    "\uff6b\001\002\000\056\003\uff6e\004\uff6e\010\uff6e\020\uff6e" +
    "\021\uff6e\022\uff6e\023\uff6e\024\uff6e\025\uff6e\036\uff6e\051" +
    "\uff6e\061\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e" +
    "\071\uff6e\072\uff6e\073\uff6e\104\uff6e\111\uff6e\001\002\000" +
    "\012\023\022\024\031\025\032\111\u0127\001\002\000\004" +
    "\035\u012e\001\002\000\004\111\u012b\001\002\000\004\077" +
    "\u012a\001\002\000\020\017\uffa2\027\uffa2\046\uffa2\105\uffa2" +
    "\107\uffa2\110\uffa2\111\uffa2\001\002\000\004\035\u012c\001" +
    "\002\000\016\017\050\027\037\105\047\107\043\110\045" +
    "\111\044\001\002\000\004\077\uff9d\001\002\000\014\027" +
    "\037\105\047\107\043\110\045\111\044\001\002\000\016" +
    "\026\053\027\055\030\057\031\056\032\052\077\uff9e\001" +
    "\002\000\004\111\u0131\001\002\000\004\105\u0132\001\002" +
    "\000\016\027\037\105\047\106\uff97\107\043\110\045\111" +
    "\044\001\002\000\004\106\u0134\001\002\000\006\076\uff93" +
    "\077\uff93\001\002\000\056\003\uff6d\004\uff6d\010\uff6d\020" +
    "\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025\uff6d\036\uff6d" +
    "\051\uff6d\061\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070" +
    "\uff6d\071\uff6d\072\uff6d\073\uff6d\104\uff6d\111\uff6d\001\002" +
    "\000\004\104\u0137\001\002\000\004\071\u0138\001\002\000" +
    "\004\105\u0139\001\002\000\020\017\214\027\037\046\212" +
    "\105\047\107\043\110\045\111\044\001\002\000\004\106" +
    "\u013b\001\002\000\004\077\u013c\001\002\000\056\003\uffa3" +
    "\004\uffa3\010\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\036\uffa3\051\uffa3\061\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\104" +
    "\uffa3\111\uffa3\001\002\000\006\066\u0147\104\uffad\001\002" +
    "\000\056\003\125\004\127\010\126\020\115\021\146\022" +
    "\111\023\022\024\031\025\032\036\110\051\107\061\122" +
    "\064\132\065\uff63\066\uff63\067\uff63\070\116\071\140\072" +
    "\150\073\131\104\uff63\111\123\001\002\000\010\065\u0140" +
    "\066\uffac\104\uffac\001\002\000\016\017\050\027\037\105" +
    "\047\107\043\110\045\111\044\001\002\000\004\100\u0142" +
    "\001\002\000\056\003\uffaa\004\uffaa\010\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\036\uffaa\051\uffaa" +
    "\061\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071" +
    "\uffaa\072\uffaa\073\uffaa\104\uffaa\111\uffaa\001\002\000\006" +
    "\066\uffab\104\uffab\001\002\000\012\065\uffa8\066\uffa8\067" +
    "\u0145\104\uffa8\001\002\000\004\077\u0146\001\002\000\010" +
    "\065\uffa9\066\uffa9\104\uffa9\001\002\000\004\100\u014a\001" +
    "\002\000\004\104\u0149\001\002\000\056\003\uffaf\004\uffaf" +
    "\010\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\036\uffaf\051\uffaf\061\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\104\uffaf\111" +
    "\uffaf\001\002\000\050\003\125\004\127\010\126\020\115" +
    "\021\146\022\111\023\022\024\031\025\032\036\110\051" +
    "\107\061\122\064\132\067\uff63\070\116\071\140\072\150" +
    "\073\131\111\123\001\002\000\004\067\u014c\001\002\000" +
    "\004\077\u014d\001\002\000\004\104\uffae\001\002\000\004" +
    "\111\u014f\001\002\000\006\075\161\111\u0150\001\002\000" +
    "\010\076\uff8c\077\uff8c\105\u0157\001\002\000\004\077\uff91" +
    "\001\002\000\006\076\u0153\077\uff90\001\002\000\004\111" +
    "\u0150\001\002\000\004\077\uff8f\001\002\000\006\076\u0153" +
    "\077\uff8e\001\002\000\004\077\uff8d\001\002\000\016\027" +
    "\037\105\047\106\uff97\107\043\110\045\111\044\001\002" +
    "\000\004\106\u0159\001\002\000\006\076\uff8b\077\uff8b\001" +
    "\002\000\004\106\u015b\001\002\000\004\077\u015c\001\002" +
    "\000\056\003\uff70\004\uff70\010\uff70\020\uff70\021\uff70\022" +
    "\uff70\023\uff70\024\uff70\025\uff70\036\uff70\051\uff70\061\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\070\uff70\071\uff70\072" +
    "\uff70\073\uff70\104\uff70\111\uff70\001\002\000\004\074\u015e" +
    "\001\002\000\154\010\343\020\322\021\371\022\307\023" +
    "\317\024\365\025\304\027\344\030\306\031\332\035\327" +
    "\036\303\040\337\041\312\042\345\043\355\044\370\045" +
    "\364\046\326\047\325\050\331\051\302\052\341\053\330" +
    "\054\350\055\310\056\347\057\333\060\305\061\334\062" +
    "\335\063\356\064\353\065\311\066\363\067\346\070\323" +
    "\071\361\072\372\073\351\075\357\077\336\100\315\101" +
    "\324\102\321\103\320\104\316\105\362\106\360\107\301" +
    "\110\354\111\340\112\352\001\002\000\004\074\u0167\001" +
    "\002\000\154\010\343\020\322\021\371\022\307\023\317" +
    "\024\365\025\304\027\344\030\306\031\332\035\327\036" +
    "\303\040\337\041\312\042\345\043\355\044\370\045\364" +
    "\046\326\047\325\050\331\051\302\052\341\053\330\054" +
    "\350\055\310\056\347\057\333\060\305\061\334\062\335" +
    "\063\356\064\353\065\311\066\363\067\346\070\323\071" +
    "\361\072\372\073\351\075\357\077\336\100\315\101\324" +
    "\102\321\103\320\104\316\105\362\106\360\107\301\110" +
    "\354\111\340\112\352\001\002\000\004\074\u0162\001\002" +
    "\000\004\076\u0163\001\002\000\004\037\u0164\001\002\000" +
    "\004\111\u0165\001\002\000\004\106\u0166\001\002\000\004" +
    "\077\uff8a\001\002\000\004\076\u0168\001\002\000\004\037" +
    "\u0169\001\002\000\004\111\u016a\001\002\000\004\106\u016b" +
    "\001\002\000\004\077\uff89\001\002\000\010\033\u0172\034" +
    "\u0170\035\u0171\001\002\000\004\106\u016e\001\002\000\004" +
    "\103\u016f\001\002\000\050\003\uffa0\004\uffa0\010\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\036\uffa0" +
    "\051\uffa0\061\uffa0\064\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\104\uffa0\111\uffa0\001\002\000\004\106\uff9a\001\002" +
    "\000\014\027\037\105\047\107\043\110\045\111\044\001" +
    "\002\000\004\106\uff9b\001\002\000\016\026\053\027\055" +
    "\030\057\031\056\032\052\106\uff9c\001\002\000\004\104" +
    "\u0175\001\002\000\056\003\uff9f\004\uff9f\010\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\036\uff9f\051" +
    "\uff9f\061\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\072\uff9f\073\uff9f\104\uff9f\111\uff9f\001\002\000" +
    "\056\003\uff6c\004\uff6c\010\uff6c\020\uff6c\021\uff6c\022\uff6c" +
    "\023\uff6c\024\uff6c\025\uff6c\036\uff6c\051\uff6c\061\uff6c\064" +
    "\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c" +
    "\073\uff6c\104\uff6c\111\uff6c\001\002\000\012\035\u0183\076" +
    "\uffc6\077\uffc6\101\067\001\002\000\006\076\u017b\077\uffc4" +
    "\001\002\000\004\077\uffc9\001\002\000\004\077\uffc8\001" +
    "\002\000\004\111\u017e\001\002\000\006\076\u017d\077\uffc5" +
    "\001\002\000\004\111\u017e\001\002\000\010\035\u0180\076" +
    "\uffc6\077\uffc6\001\002\000\006\076\uffc2\077\uffc2\001\002" +
    "\000\024\017\050\020\115\021\146\022\153\027\037\105" +
    "\047\107\043\110\045\111\044\001\002\000\006\076\uffc7" +
    "\077\uffc7\001\002\000\006\076\uffc3\077\uffc3\001\002\000" +
    "\026\010\u0184\017\050\020\115\021\146\022\153\027\037" +
    "\105\047\107\043\110\045\111\044\001\002\000\004\105" +
    "\u0185\001\002\000\004\106\u0186\001\002\000\004\077\u0187" +
    "\001\002\000\056\003\uff66\004\uff66\010\uff66\020\uff66\021" +
    "\uff66\022\uff66\023\uff66\024\uff66\025\uff66\036\uff66\051\uff66" +
    "\061\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071" +
    "\uff66\072\uff66\073\uff66\104\uff66\111\uff66\001\002\000\012" +
    "\035\u0180\076\uffc6\077\uffc6\101\067\001\002\000\004\077" +
    "\uffca\001\002\000\004\077\u018b\001\002\000\020\003\ufff7" +
    "\004\ufff7\023\ufff7\024\ufff7\025\ufff7\056\ufff7\060\ufff7\001" +
    "\002\000\020\003\ufff6\004\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\056\ufff6\060\ufff6\001\002\000\004\056\ufff5\001\002\000" +
    "\020\003\ufff9\004\ufff9\023\ufff9\024\ufff9\025\ufff9\056\ufff9" +
    "\060\ufff9\001\002\000\004\006\u0192\001\002\000\004\006" +
    "\ufffb\001\002\000\004\055\u0193\001\002\000\004\055\ufffc" +
    "\001\002\000\022\003\ufffe\004\ufffe\011\ufffe\023\ufffe\024" +
    "\ufffe\025\ufffe\056\ufffe\060\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0191\000\010\002\006\004\005\006\003\001\001\000" +
    "\004\010\u018e\001\001\000\002\001\001\000\006\021\011" +
    "\022\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\023\013\026\016\025\037\022\001\001\000\006" +
    "\021\011\022\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\023\013\u018c\016\025\037\022" +
    "\001\001\000\002\001\001\000\010\040\u0177\042\u0188\045" +
    "\u0189\001\001\000\004\003\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\045" +
    "\024\041\025\040\045\037\001\001\000\006\025\072\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\024\050\025\040" +
    "\045\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\063\025\040\045\037\001\001\000\010\024\062" +
    "\025\040\045\037\001\001\000\002\001\001\000\010\024" +
    "\061\025\040\045\037\001\001\000\010\024\060\025\040" +
    "\045\037\001\001\000\010\024\057\025\040\045\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\067\025\040\045\037\001\001" +
    "\000\002\001\001\000\004\046\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\016\101\017\111\020\112" +
    "\023\120\036\116\043\141\045\150\047\136\050\135\051" +
    "\134\055\132\056\104\062\133\063\142\064\140\071\117" +
    "\072\113\073\143\074\105\075\103\076\146\102\102\104" +
    "\127\113\144\114\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\u0177\042\u0178\045\u0179\001\001\000\002" +
    "\001\001\000\064\016\101\017\111\020\112\023\120\036" +
    "\116\043\141\045\150\047\136\050\135\051\134\055\132" +
    "\056\104\062\133\063\142\064\140\071\117\072\113\073" +
    "\143\074\105\075\103\076\146\102\102\104\127\113\144" +
    "\114\u0173\001\001\000\002\001\001\000\004\115\u016c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\060\u013c\061\u013e\107\u013d\001\001\000\064\016" +
    "\101\017\111\020\112\023\120\036\116\043\141\045\150" +
    "\047\136\050\135\051\134\055\132\056\104\062\133\063" +
    "\142\064\140\071\117\072\113\073\143\074\105\075\103" +
    "\076\146\102\102\104\127\113\144\114\u0135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\016" +
    "\101\017\111\020\112\023\120\036\116\043\141\045\150" +
    "\047\136\050\135\051\134\055\132\056\104\062\133\063" +
    "\142\064\140\071\117\072\113\073\143\074\105\075\103" +
    "\076\146\102\102\104\127\113\144\114\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\253\054\252\105\254\001\001\000" +
    "\064\016\101\017\111\020\112\023\120\036\116\043\141" +
    "\045\150\047\136\050\135\051\134\055\132\056\104\062" +
    "\133\063\142\064\140\071\117\072\113\073\143\074\105" +
    "\075\103\076\146\102\102\104\127\113\144\114\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\024\205\025" +
    "\040\026\206\027\210\030\203\033\204\034\212\035\207" +
    "\045\037\001\001\000\064\016\101\017\111\020\112\023" +
    "\120\036\116\043\141\045\150\047\136\050\135\051\134" +
    "\055\132\056\104\062\133\063\142\064\140\071\117\072" +
    "\113\073\143\074\105\075\103\076\146\102\102\104\127" +
    "\113\144\114\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\014\154" +
    "\024\041\025\040\044\153\045\037\071\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\163\025\040\045\037" +
    "\067\164\001\001\000\004\070\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\172\025\040\045\037" +
    "\001\001\000\002\001\001\000\010\024\171\025\040\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\024\163\025\040\045\037\067\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\205\025\040\026\206\027" +
    "\210\034\216\035\207\045\037\001\001\000\004\031\215" +
    "\001\001\000\014\024\205\025\040\026\220\027\210\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\205\025\040\027\235\045\037\001\001\000\012\024" +
    "\205\025\040\027\234\045\037\001\001\000\012\024\205" +
    "\025\040\027\233\045\037\001\001\000\012\024\205\025" +
    "\040\027\232\045\037\001\001\000\012\024\205\025\040" +
    "\027\231\045\037\001\001\000\012\024\205\025\040\027" +
    "\230\045\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\024\205\025\040\026\206\027\210" +
    "\033\240\034\212\035\207\045\037\001\001\000\002\001" +
    "\001\000\004\032\236\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\024\205\025\040\026\206\027\210\030" +
    "\244\033\204\034\212\035\207\045\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\262" +
    "\106\260\001\001\000\010\053\253\054\257\105\254\001" +
    "\001\000\064\016\101\017\111\020\112\023\120\036\116" +
    "\043\141\045\150\047\136\050\135\051\134\055\132\056" +
    "\104\062\133\063\142\064\140\071\117\072\113\073\143" +
    "\074\105\075\103\076\146\102\102\104\127\113\144\114" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\016\101\017\111\020\112\023\120\036" +
    "\116\043\141\045\150\047\136\050\135\051\134\055\132" +
    "\056\104\062\133\063\142\064\140\071\117\072\113\073" +
    "\143\074\105\075\103\076\146\102\102\104\127\113\144" +
    "\114\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\024\205\025\040\026\206\027\210\030\267\033\204\034" +
    "\212\035\207\045\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\273\024\041\025" +
    "\040\045\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\313\015" +
    "\366\077\365\100\312\101\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\376\015\u0100\077\365\101\341\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\077\374\101\372\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\077\374\101\372\001\001\000" +
    "\004\103\u0104\001\001\000\002\001\001\000\004\066\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\154\024\041\025\040\044\u011a\045\037\071\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\024\205\025\040" +
    "\026\206\027\210\030\u0120\033\204\034\212\035\207\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\u0127\065\u0128\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\u012c\024\041\025\040\045\037\001\001\000\002" +
    "\001\001\000\010\024\u012e\025\040\045\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\024\163\025\040\045\037\067\u0132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\024\205\025" +
    "\040\026\206\027\210\030\u0139\033\204\034\212\035\207" +
    "\045\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u0147\001\001\000\064\016\101" +
    "\017\111\020\112\023\120\036\116\043\141\045\150\047" +
    "\136\050\135\051\134\055\132\056\104\062\133\063\142" +
    "\064\140\071\117\072\113\073\143\074\105\075\103\076" +
    "\146\102\102\104\127\113\144\114\u0143\001\001\000\010" +
    "\060\u0142\061\u013e\107\u013d\001\001\000\012\014\u0140\024" +
    "\041\025\040\045\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\016\101\017\111\020\112\023" +
    "\120\036\116\043\141\045\150\047\136\050\135\051\134" +
    "\055\132\056\104\062\133\063\142\064\140\071\117\072" +
    "\113\073\143\074\105\075\103\076\146\102\102\104\127" +
    "\113\144\114\u014a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\110\u0151" +
    "\111\u0150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\112\u0153\001\001\000\004\110\u0154\001\001\000\002" +
    "\001\001\000\004\112\u0155\001\001\000\002\001\001\000" +
    "\012\024\163\025\040\045\037\067\u0157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\u015f" +
    "\077\365\101\u015e\001\001\000\002\001\001\000\006\077" +
    "\374\101\u0160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\u0172\025\040\045\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\065\001" +
    "\001\000\004\041\u017b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0181\001\001\000\002\001\001\000" +
    "\004\040\u017e\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\154\024\041\025\040\044\u0180\045\037\071" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\154\024\041\025\040\044\u0180\045\037\071\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoJP msJP = ManejadorSintacticoJP.getInstacia();
    public ManejadorArreglos ma = ManejadorArreglos.getInstancia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public FrameCTDOA frameCTDOA;

    public SintacticoC(LexicoC lexer) { 
        super(lexer);   
        msJP.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msJP.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            frameCTDOA.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:\t\t\t\t\t<< " + (s.right + 1) + " >>"
                    + "\n\tColumna #\t\t\t\t\t<< " + (s.left + 1) + " >>"
                    + "\n\tToken NO Reconocido:\t\t\t\t<< " + (s.value) + " >>" );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoC$actions {
  private final SintacticoC parser;

  /** Constructor */
  CUP$SintacticoC$actions(SintacticoC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoC$do_action(
    int                        CUP$SintacticoC$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoC$parser,
    java.util.Stack            CUP$SintacticoC$stack,
    int                        CUP$SintacticoC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoC$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // texto ::= ERROR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // texto ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // texto ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // texto ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // texto ::= PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // texto ::= PARENTESIS_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // texto ::= CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // texto ::= CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // texto ::= LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // texto ::= LLAVE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // texto ::= DOS_PUNTOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // texto ::= PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // texto ::= PUNTO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // texto ::= PRINTF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // texto ::= DO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // texto ::= WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // texto ::= FOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // texto ::= BREAK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // texto ::= DEFAULT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // texto ::= CASE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // texto ::= SWITCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // texto ::= ELSE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // texto ::= ELSE_IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // texto ::= IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // texto ::= CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // texto ::= MAIN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // texto ::= VOID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // texto ::= PROGRAMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // texto ::= SCANF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // texto ::= OR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // texto ::= AND 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // texto ::= NOT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // texto ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // texto ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // texto ::= MAYOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // texto ::= MENOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // texto ::= DIFERENTE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // texto ::= IGUAL_IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // texto ::= IGUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // texto ::= DIV 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // texto ::= POR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // texto ::= MENOS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // texto ::= CLRSCR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // texto ::= GETCH 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // texto ::= CHAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // texto ::= FLOAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // texto ::= INT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // texto ::= JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // texto ::= PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // texto ::= VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto",61, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // texto_cadena ::= texto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // texto_cadena ::= texto_cadena texto 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new String(a.toString()  + " " + e.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_cadena",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // estructuras_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // estructuras_p ::= estructuras estructuras_p 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras_p",74, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // getch ::= ID IGUAL GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID((String) a, aleft, aright);
        if (s != null) {
            parser.mc.addGetch(s);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // getch ::= tipo_dato ID IGUAL GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		
        if (!(((Tipo) t).equals(Constantes.FLOAT_VAR_PJ))) {
            Object resultado = parser.msJP.declararVariables(new Simbolo((Tipo) t, new Simbolo(null, null, (String) a)), aleft, aright);
            if (resultado != null) {
                if (resultado instanceof Simbolo) {
                    parser.mc.addGetch((Simbolo) resultado);
                }  
            } 
        }
    
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // getch ::= GETCH PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addGetch(null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("getch",17, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // estructuras ::= error CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // estructuras ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // estructuras ::= COMENTARIO 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // estructuras ::= llamada_fp PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // estructuras ::= printf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // estructuras ::= instancia_constructor PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // estructuras ::= declaracion_variables PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // estructuras ::= estructura_if 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // estructuras ::= CLRSCR PARENTESIS_A PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		parser.mc.addCLRSCR();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // estructuras ::= getch 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // estructuras ::= asignacion_var PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // estructuras ::= scanf PUNTO_COMA 
            {
              Object RESULT =null;
		/* Ignore */
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructuras",73, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // vp ::= vp COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // vp ::= COMA AMPERSAND ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // vp ::= vp COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // vp ::= COMA ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("vp",52, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // valores ::= AMPERSAND ID vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // valores ::= AMPERSAND ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // valores ::= ID vp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, parser.msJP.metodoBuscarID(e, eleft, eright));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // valores ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("valores",65, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_cadena COMILLAS PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.imprimir(new Simbolo(null, "\"" + e + "\""));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // printf ::= PRINTF PARENTESIS_A COMILLAS texto_p COMILLAS COMA valores PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.comprobarPrint((List<Integer>)a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("printf",64, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tipo_dato_almacenar ::= LEER_FLOAT 
            {
              Object RESULT =null;
		RESULT = 3;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tipo_dato_almacenar ::= LEER_CHAR 
            {
              Object RESULT =null;
		RESULT = 2;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tipo_dato_almacenar ::= LEER_INT 
            {
              Object RESULT =null;
		RESULT = 1;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato_almacenar",63, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // txt ::= tipo_dato_almacenar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaNumeros(e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // txt ::= texto_cadena tipo_dato_almacenar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 parser.mc.imprimir(new Simbolo(null, "\"" + a + "\""));  RESULT = parser.msJP.listaNumeros(e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("txt",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // texto_p ::= txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // texto_p ::= texto_p txt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.listaNumeros(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("texto_p",62, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // scanf ::= SCANF PARENTESIS_A COMILLAS tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, e);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // scanf ::= SCANF PARENTESIS_A COMILLAS texto_cadena tipo_dato_almacenar COMILLAS COMA AMPERSAND ID PARENTESIS_C 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        parser.mc.imprimir(new Simbolo(null, "\"" + i + "\""));
        Simbolo s = parser.msJP.metodoBuscarID(e, eleft, eright);
        if(s != null) {
            parser.mc.imprimirScanf((int)a, e);
        } 
        RESULT = s;   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("scanf",60, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // i_ins ::= ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(a != null) {
            RESULT =  new Simbolo(null, a, e);
        } 
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // i_ins ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT =  new Simbolo(null, new ArrayList<>(), e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("i_ins",70, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instancia_pp ::= COMA i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instancia_pp ::= COMA i_ins 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_pp",72, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instancia_p ::= i_ins instancia_pp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",71, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instancia_p ::= i_ins 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_p",71, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instancia_constructor ::= JAVA PUNTO ID instancia_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.agregarInstancias((List<Simbolo>) e, a, aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("instancia_constructor",56, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // llamada_fp ::= JAVA PUNTO ID PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.buscarInstancia(e, a, aleft, aright, i, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // llamada_fp ::= VB PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(a, 1, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamada_fp ::= PY PUNTO ID PARENTESIS_A parametros PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.mi.searchSimbolo(a, 3, aleft, aright, e, "");
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("llamada_fp",55, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_p ::= parametros_p COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_p ::= COMA operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros_p",54, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(null, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros ::= operaciones_aritmeticas parametros_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("parametros",53, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operaciones_asignacion ::= ID MENOS_MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -2, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operaciones_asignacion ::= ID MAS_MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = (new Simbolo(Constantes.INT_VAR_PJ, -1, a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operaciones_asignacion ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        Simbolo nuevo;
        if(e != null) {
            nuevo = new Simbolo(((Simbolo) e).getTipo(), e, a);
        } else { 
            nuevo = null;
        }
        RESULT = nuevo;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_asignacion",75, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // var ::= tipo_dato ID IGUAL dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(i, e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarAsignacionFor(e, a, aleft, aright, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("var",51, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // for ::= for_asignacion estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(((For) a).getA() != null && ((For) a).getE() != null && ((For) a).getI() != null) {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, true, 3);
        } else {
            RESULT = parser.msJP.contruirEstructuraCiloDW(o, null, 3);;
        }
        parser.mc.actualizar();
        parser.mc.imprimirResto();
        parser.msJP.removerCualquierSimbolo(((For) a).getA());
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for",50, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // for_asignacion ::= for_condicional operaciones_asignacion PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        For f = (For) a;
        f.setI(i);
        RESULT = parser.mc.addForJPA(f, (Simbolo) i);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_asignacion",59, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // for_condicional ::= for_var condicional PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		 
        ((For) a).setE(e);
        parser.mc.etiqueta();
        RESULT = a;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_condicional",58, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // for_var ::= FOR PARENTESIS_A var PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = new For(a, parser.mc.addForJPV((Simbolo) a));
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("for_var",57, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // do_while ::= do_while_p estructuras_p CORCHETE_C WHILE PARENTESIS_A condicional PARENTESIS_C PUNTO_COMA 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while",49, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // do_while_p ::= DO CORCHETE_A 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("do_while_p",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // while ::= while_p estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while",48, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while_p ::= while_n PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        ((While) w).setA(a);
        RESULT = w;
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_p",38, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("while_n",37, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // caso ::= caso_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // caso ::= caso_p estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		
        RESULT = parser.msJP.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso",47, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // caso_p ::= CASE dato DOS_PUNTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_p",69, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cantidad_casos ::= caso cantidad_casos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // caso_default ::= 
            {
              Object RESULT =null;
		parser.mc.etiquetaGoto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",45, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // caso_default ::= DEFAULT DOS_PUNTOS estructuras_p BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		  
        parser.mc.etiquetaGoto();
        RESULT = parser.msJP.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("caso_default",45, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // switch ::= switch_p cantidad_casos caso_default CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        RESULT = parser.msJP.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch",44, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // switch_p ::= SWITCH PARENTESIS_A dato PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("switch_p",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructura_if ::= if else_if_p else 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, i);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estructura_if ::= if else_if_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.construirCondicionalIf(a, e, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_if",43, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // else_if_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else_if_p ::= else_if else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // else_if ::= ie estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 2); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else_if",41, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // else ::= ee estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // if ::= ii estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("if",39, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ee ::= ELSE CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); 
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ee",68, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ie ::= ELSE_IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ie",67, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ii ::= IF PARENTESIS_A condicional PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("ii",66, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C dimension 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.ma.listaDimensiones(a, e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",36, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dimension ::= LLAVE_A operaciones_aritmeticas LLAVE_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		
        if(e != null) {
            if (((Simbolo) e).getTipo() != Constantes.CHAR_VAR_PJ && 
                Constantes.FLOAT_VAR_PJ.isFatherOf(((Simbolo) e).getTipo().getSymbol())) {  
                RESULT = ((Simbolo) e);
            } else {
                parser.msJP.errorSemantico(eleft, eright, "Arreglo", "Error, comprobacion de tipos en la dimension de arreglos.");
            }
        } else { 
            RESULT = null;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dimension",36, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arreglo ::= ID dimension 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e == null) {
            RESULT = null;
        } else {
            RESULT = new Simbolo(null, e, a);
        }   
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("arreglo",35, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // asignacion ::= llamada_fp 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
        if(a != null) {
            Tipo tipo = ((Simbolo) a).getTipoFuncion();
            if(tipo.getNombre().equals("Funcion")) {
                RESULT = a;
            } else {
                parser.msJP.errorSemantico(aleft, aright, "Asignacion", "Error, la instancia es un metodo y no puede asignarse.");
                RESULT = null;
            }
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // asignacion ::= dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion",34, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // asignacion_var ::= arreglo IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) { 
            parser.msJP.asignacionArreglos(a, aleft, aright, (Simbolo) e);
        } else { 
            parser.msJP.asignacionArreglos(null, aleft, aright, null);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // asignacion_var ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {      
            parser.msJP.asignacionVariables(new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a), aleft, aright);
        } else { 
            parser.msJP.asignacionVariables(null, aleft, aright);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("asignacion_var",33, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // lista_id_p ::= lista_id_p COMA lista_id_valores 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // lista_id_p ::= COMA lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_p",31, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lista_ids ::= lista_id_valores 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_ids ::= lista_id_valores lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_ids",32, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_id_valores ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(null, null, e.toString());
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_id_valores ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        if(e != null) {        
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e).getValor(), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("lista_id_valores",30, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_variables ::= tipo_dato arreglo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_variables ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariables(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables",28, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_variables_g ::= tipo_dato lista_ids 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo)a, e), aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("declaracion_variables_g",29, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_not",27, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_and",26, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional_or",25, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) { parser.mc.escribirEtiqueta();}
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("or",24, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("and",23, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",21, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operaciones_logicas ::= tipos_comparacion DIFERENTE tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operaciones_logicas ::= tipos_comparacion IGUAL_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",20, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // estruct_op ::= arreglo 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.buscarArreglo(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // estruct_op ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // estruct_op ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // estruct_op ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estruct_op ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estruct_op",19, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_aritmeticas ::= estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_aritmeticas ::= MENOS estruct_op 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.modificarVariables(e, eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operaciones_aritmeticas ::= operaciones_aritmeticas MOD operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // librerias_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // librerias_p ::= librerias librerias_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // librerias ::= INCLUDE LIBRERIA_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.agregarLibreria(a.toString(), aleft, aright, 4);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // librerias ::= INCLUDE LIBRERIA_PYTHON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 3);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // librerias ::= INCLUDE LIBRERIA_CLASES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 2);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // librerias ::= INCLUDE LIBRERIA_JAVA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 5);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // librerias ::= INCLUDE LIBRERIA_VB 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		parser.msJP.agregarLibreria(a.toString(), aleft, aright, 1);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("librerias",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= FLOAT 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_dato ::= INT 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_PJ;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_PJ, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("dato",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cv_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cv_p ::= constante cv_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT = parser.msJP.lista(a, e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cv_p",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constante ::= error PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constante ::= tipo_dato arreglo PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.declararArreglo(e, eleft, eright, (Tipo) a);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constante ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constante ::= declaracion_variables_g PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = e;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constante ::= CONST tipo_dato ID IGUAL dato PUNTO_COMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = parser.msJP.declararVariablesGlobales(new Simbolo((Tipo) e, i, a), eleft, eright);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("constante",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod_java ::= COD_JAVA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            LexicoJava lj = new LexicoJava(new StringReader((e.toString().replaceAll("%%JAVA", ""))));
            lj.setFrameCTDOA(parser.frameCTDOA);
            SintacticoJava sintacticoj = new SintacticoJava(lj);
            sintacticoj.setContadorLineas(eright);
            sintacticoj.setFrameCTDOA(parser.frameCTDOA);
            sintacticoj.parse();
        } catch( Exception ex) { 
            System.out.println("Errores, analizando JAVA");
        }
        parser.msJP.nuevoAnalisis();
        parser.msJP.setContadorLineas(0);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_java",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod_py ::= COD_PY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		
        try {
            LexicoPython lexicoPython = new LexicoPython(new StringReader(e.toString().replaceAll("%%PY", "")));
            lexicoPython.setFrameCTDOA(parser.frameCTDOA); 
            SintacticoPython sintacticoPython = new SintacticoPython(lexicoPython);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.setFrameCTDOA(parser.frameCTDOA);
            sintacticoPython.setContadorLineas(eright);
            sintacticoPython.parse();
        } catch( Exception ex) {
            System.out.println("Errores, analizando PY");
        }
        parser.msJP.setContadorLineas(0);
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_py",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod_vb ::= COD_VB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		  
        try {
            parser.msJP.setContadorLineas(0);
            LexicoVisualBasic lexicoVisualBasic = new LexicoVisualBasic(new StringReader(e.toString().replaceAll("%%VB", "")));
            lexicoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            SintacticoVisualBasic sintacticoVisualBasic = new SintacticoVisualBasic(lexicoVisualBasic);
            sintacticoVisualBasic.setFrameCTDOA(parser.frameCTDOA);
            sintacticoVisualBasic.parse();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Errores, analizando el codigo de Visual Basic.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("cod_vb",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura_principal ::= cod_vb cod_java cod_py PROGRAMA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("estructura_principal",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= VOID MAIN PARENTESIS_A PARENTESIS_C CORCHETE_A 
            {
              Object RESULT =null;
		parser.mc.addCuartetoProcedimiento(2, "main", "", null, null);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_principal librerias_p cv_p main estructuras_p CORCHETE_C 
            {
              Object RESULT =null;
		parser.mc.finProcedimiento(false);
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoC$parser.done_parsing();
          return CUP$SintacticoC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

