
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 14 23:35:03 CST 2020
//----------------------------------------------------

package proyectofinal.ctdoa.backend.analizador.visual_basic;

import java_cup.runtime.*;
import proyectofinal.ctdoa.backend.objetos.*;
import proyectofinal.ctdoa.backend.manejadores.*;
import java.util.ArrayList;
import java.util.List;
import proyectofinal.ctdoa.frontend.gui.FrameCTDOA;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 14 23:35:03 CST 2020
  */
public class SintacticoVisualBasic extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoVisualBasic() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoVisualBasic(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\005\000\002\005\003\000" +
    "\002\005\005\000\002\005\004\000\002\005\002\000\002" +
    "\003\003\000\002\003\004\000\002\006\004\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\011\003\000\002\065\005\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\013\003\000\002" +
    "\013\003\000\002\025\003\000\002\026\003\000\002\027" +
    "\003\000\002\067\005\000\002\067\003\000\002\071\005" +
    "\000\002\071\003\000\002\070\006\000\002\070\003\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\014\003\000\002\016\006\000\002\016\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\010\000\002\020\004" +
    "\000\002\021\004\000\002\022\004\000\002\022\005\000" +
    "\002\023\005\000\002\024\003\000\002\024\003\000\002" +
    "\030\004\000\002\030\004\000\002\030\004\000\002\035" +
    "\005\000\002\035\004\000\002\034\003\000\002\033\005" +
    "\000\002\032\006\000\002\017\004\000\002\036\007\000" +
    "\002\037\003\000\002\037\003\000\002\031\010\000\002" +
    "\040\006\000\002\042\004\000\002\042\002\000\002\041" +
    "\005\000\002\041\007\000\002\045\004\000\002\046\005" +
    "\000\002\047\004\000\002\047\002\000\002\050\006\000" +
    "\002\050\005\000\002\051\005\000\002\073\003\000\002" +
    "\043\004\000\002\052\007\000\002\052\006\000\002\053" +
    "\006\000\002\053\005\000\002\044\004\000\002\054\004" +
    "\000\002\054\002\000\002\056\006\000\002\055\006\000" +
    "\002\055\007\000\002\057\006\000\002\060\004\000\002" +
    "\060\003\000\002\015\005\000\002\061\004\000\002\062" +
    "\003\000\002\075\012\000\002\066\010\000\002\074\010" +
    "\000\002\072\006\000\002\076\005\000\002\076\006\000" +
    "\002\076\002\000\002\077\006\000\002\077\007\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\004\000\002\063\005\000\002\063\005\000\002" +
    "\064\005\000\002\064\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\016\002\ufff6\003\012\055\005\056\016\057" +
    "\011\062\ufff6\001\002\000\006\002\ufffe\062\ufffe\001\002" +
    "\000\006\056\016\057\011\001\002\000\006\002\000\062" +
    "\032\001\002\000\004\002\u0106\001\002\000\006\002\uffff" +
    "\062\uffff\001\002\000\004\071\u0101\001\002\000\006\035" +
    "\377\057\376\001\002\000\034\003\072\006\060\007\070" +
    "\033\075\037\051\040\061\045\077\047\056\053\050\064" +
    "\074\065\107\066\066\071\057\001\002\000\006\002\ufff9" +
    "\062\ufff9\001\002\000\034\003\072\006\060\007\070\033" +
    "\075\037\051\040\061\045\077\047\056\053\050\064\074" +
    "\065\107\066\066\071\057\001\002\000\004\071\017\001" +
    "\002\000\004\060\020\001\002\000\006\061\uff90\071\021" +
    "\001\002\000\004\034\034\001\002\000\004\061\023\001" +
    "\002\000\004\034\024\001\002\000\010\010\025\011\027" +
    "\012\030\001\002\000\014\020\ufff0\052\ufff0\061\ufff0\062" +
    "\ufff0\063\ufff0\001\002\000\004\062\032\001\002\000\014" +
    "\020\uffef\052\uffef\061\uffef\062\uffef\063\uffef\001\002\000" +
    "\014\020\uffee\052\uffee\061\uffee\062\uffee\063\uffee\001\002" +
    "\000\036\003\uff96\006\uff96\007\uff96\033\uff96\037\uff96\040" +
    "\uff96\045\uff96\047\uff96\053\uff96\062\033\064\uff96\065\uff96" +
    "\066\uff96\071\uff96\001\002\000\064\002\ufff5\003\ufff5\006" +
    "\ufff5\007\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\045\ufff5\046\ufff5\047\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\062\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\071\ufff5\001\002\000\064\002\ufff4\003" +
    "\ufff4\006\ufff4\007\ufff4\033\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\042\ufff4\045\ufff4\046\ufff4\047\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\062\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\071\ufff4\001\002\000\010\010" +
    "\025\011\027\012\030\001\002\000\006\061\uff92\063\036" +
    "\001\002\000\004\071\044\001\002\000\006\061\uff91\063" +
    "\040\001\002\000\004\071\041\001\002\000\004\034\042" +
    "\001\002\000\010\010\025\011\027\012\030\001\002\000" +
    "\006\061\uff8e\063\uff8e\001\002\000\004\034\045\001\002" +
    "\000\010\010\025\011\027\012\030\001\002\000\006\061" +
    "\uff8f\063\uff8f\001\002\000\010\035\uffa0\051\350\052\uffa0" +
    "\001\002\000\004\054\345\001\002\000\020\005\uffbc\014" +
    "\uffbc\027\uffbc\060\uffbc\067\uffbc\070\uffbc\071\uffbc\001\002" +
    "\000\034\003\072\006\060\007\070\033\075\037\051\040" +
    "\061\045\077\047\056\053\050\064\074\065\107\066\066" +
    "\071\057\001\002\000\006\052\337\062\uffac\001\002\000" +
    "\020\005\301\014\127\027\277\060\126\067\121\070\124" +
    "\071\122\001\002\000\006\052\uff8d\062\uff8d\001\002\000" +
    "\020\005\301\014\127\027\277\060\126\067\121\070\124" +
    "\071\122\001\002\000\004\020\221\001\002\000\004\060" +
    "\330\001\002\000\004\062\032\001\002\000\006\052\uff88" +
    "\062\uff88\001\002\000\034\003\072\006\060\007\070\033" +
    "\075\037\051\040\061\045\077\047\056\053\050\064\074" +
    "\065\107\066\066\071\057\001\002\000\034\003\072\006" +
    "\060\007\070\033\075\037\051\040\061\045\077\047\056" +
    "\053\050\064\074\065\107\066\066\071\057\001\002\000" +
    "\006\050\253\062\032\001\002\000\004\060\110\001\002" +
    "\000\006\052\uff89\062\uff89\001\002\000\004\060\241\001" +
    "\002\000\006\052\uff8c\062\uff8c\001\002\000\006\035\236" +
    "\062\032\001\002\000\006\052\uff87\062\uff87\001\002\000" +
    "\004\060\110\001\002\000\004\071\212\001\002\000\006" +
    "\052\uff84\062\uff84\001\002\000\004\071\174\001\002\000" +
    "\006\052\uff85\062\uff85\001\002\000\006\052\uff8b\062\uff8b" +
    "\001\002\000\006\052\uff86\062\uff86\001\002\000\004\036" +
    "\164\001\002\000\004\062\032\001\002\000\006\052\uff8a" +
    "\062\uff8a\001\002\000\004\054\120\001\002\000\004\060" +
    "\110\001\002\000\006\004\113\061\112\001\002\000\006" +
    "\052\uffc0\062\uffc0\001\002\000\006\052\uffbd\062\uffbd\001" +
    "\002\000\004\061\114\001\002\000\006\052\uffbe\062\uffbe" +
    "\001\002\000\034\003\072\006\060\007\070\033\075\037" +
    "\051\040\061\045\077\047\056\053\050\064\074\065\107" +
    "\066\066\071\057\001\002\000\006\035\150\054\152\001" +
    "\002\000\006\035\uff9a\054\uff9a\001\002\000\014\014\127" +
    "\060\126\067\121\070\124\071\122\001\002\000\052\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\043\uffe4\044\uffe4\050\uffe4\052\uffe4\061\uffe4\062\uffe4" +
    "\001\002\000\052\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\043\uffe5\044\uffe5\050\uffe5\052" +
    "\uffe5\061\uffe5\062\uffe5\001\002\000\004\062\032\001\002" +
    "\000\052\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\043\uffe3\044\uffe3\050\uffe3\052\uffe3\061" +
    "\uffe3\062\uffe3\001\002\000\016\013\133\014\136\015\140" +
    "\016\137\017\135\062\uff97\001\002\000\014\014\127\060" +
    "\126\067\121\070\124\071\122\001\002\000\012\060\126" +
    "\067\121\070\124\071\122\001\002\000\050\013\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\043\uffe7\044" +
    "\uffe7\050\uffe7\052\uffe7\061\uffe7\062\uffe7\001\002\000\050" +
    "\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8" +
    "\043\uffe8\044\uffe8\050\uffe8\052\uffe8\061\uffe8\062\uffe8\001" +
    "\002\000\016\013\133\014\136\015\140\016\137\017\135" +
    "\061\134\001\002\000\014\014\127\060\126\067\121\070" +
    "\124\071\122\001\002\000\052\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\043\uffe6\044\uffe6" +
    "\050\uffe6\052\uffe6\061\uffe6\062\uffe6\001\002\000\014\014" +
    "\127\060\126\067\121\070\124\071\122\001\002\000\014" +
    "\014\127\060\126\067\121\070\124\071\122\001\002\000" +
    "\014\014\127\060\126\067\121\070\124\071\122\001\002" +
    "\000\014\014\127\060\126\067\121\070\124\071\122\001" +
    "\002\000\050\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030" +
    "\uffeb\031\uffeb\043\uffeb\044\uffeb\050\uffeb\052\uffeb\061\uffeb" +
    "\062\uffeb\001\002\000\050\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\025\uffea" +
    "\026\uffea\030\uffea\031\uffea\043\uffea\044\uffea\050\uffea\052" +
    "\uffea\061\uffea\062\uffea\001\002\000\050\013\uffec\014\uffec" +
    "\015\140\016\137\017\135\020\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\031\uffec\043\uffec\044\uffec" +
    "\050\uffec\052\uffec\061\uffec\062\uffec\001\002\000\050\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\043" +
    "\uffe9\044\uffe9\050\uffe9\052\uffe9\061\uffe9\062\uffe9\001\002" +
    "\000\050\013\uffed\014\uffed\015\140\016\137\017\135\020" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\030\uffed" +
    "\031\uffed\043\uffed\044\uffed\050\uffed\052\uffed\061\uffed\062" +
    "\uffed\001\002\000\036\003\uff99\006\uff99\007\uff99\033\uff99" +
    "\037\uff99\040\uff99\045\uff99\047\uff99\053\uff99\062\033\064" +
    "\uff99\065\uff99\066\uff99\071\uff99\001\002\000\006\035\uff9b" +
    "\054\uff9b\001\002\000\004\053\160\001\002\000\004\035" +
    "\156\001\002\000\016\014\127\052\153\060\126\067\121" +
    "\070\124\071\122\001\002\000\004\062\032\001\002\000" +
    "\036\003\072\006\060\007\070\033\075\037\051\040\061" +
    "\045\077\047\056\053\050\062\033\064\074\065\107\066" +
    "\066\071\057\001\002\000\004\035\uff9c\001\002\000\004" +
    "\053\157\001\002\000\006\052\uff9d\062\uff9d\001\002\000" +
    "\006\052\uff9e\062\uff9e\001\002\000\006\035\uff98\054\uff98" +
    "\001\002\000\054\003\072\006\060\007\070\033\075\035" +
    "\uff7f\036\uff7f\037\051\040\061\042\uff7f\045\077\046\uff7f" +
    "\047\056\051\uff7f\052\uff7f\053\050\054\uff7f\062\033\064" +
    "\074\065\107\066\066\071\057\001\002\000\020\035\uff80" +
    "\036\uff80\042\uff80\046\uff80\051\uff80\052\uff80\054\uff80\001" +
    "\002\000\016\005\173\014\127\060\126\067\121\070\124" +
    "\071\122\001\002\000\004\062\032\001\002\000\006\035" +
    "\167\062\033\001\002\000\004\056\170\001\002\000\006" +
    "\002\uff95\062\uff95\001\002\000\004\062\ufff3\001\002\000" +
    "\020\013\133\014\136\015\140\016\137\017\135\052\ufff1" +
    "\062\ufff1\001\002\000\006\052\ufff2\062\ufff2\001\002\000" +
    "\006\020\205\034\204\001\002\000\004\043\176\001\002" +
    "\000\014\014\127\060\126\067\121\070\124\071\122\001" +
    "\002\000\020\013\133\014\136\015\140\016\137\017\135" +
    "\044\200\062\uffb2\001\002\000\014\014\127\060\126\067" +
    "\121\070\124\071\122\001\002\000\004\062\032\001\002" +
    "\000\036\003\uffb5\006\uffb5\007\uffb5\033\uffb5\037\uffb5\040" +
    "\uffb5\045\uffb5\047\uffb5\053\uffb5\062\033\064\uffb5\065\uffb5" +
    "\066\uffb5\071\uffb5\001\002\000\016\013\133\014\136\015" +
    "\140\016\137\017\135\062\uffb3\001\002\000\010\010\025" +
    "\011\027\012\030\001\002\000\014\014\127\060\126\067" +
    "\121\070\124\071\122\001\002\000\016\013\133\014\136" +
    "\015\140\016\137\017\135\043\uffb1\001\002\000\004\020" +
    "\210\001\002\000\014\014\127\060\126\067\121\070\124" +
    "\071\122\001\002\000\016\013\133\014\136\015\140\016" +
    "\137\017\135\043\uffb0\001\002\000\010\020\221\034\220" +
    "\063\217\001\002\000\004\034\215\001\002\000\006\052" +
    "\uffc8\062\uffc8\001\002\000\010\010\025\011\027\012\030" +
    "\001\002\000\006\052\uffcb\062\uffcb\001\002\000\004\071" +
    "\233\001\002\000\010\010\025\011\027\012\030\001\002" +
    "\000\024\005\173\014\127\060\126\064\074\065\107\066" +
    "\066\067\121\070\124\071\122\001\002\000\006\034\uffc7" +
    "\063\223\001\002\000\004\071\224\001\002\000\006\034" +
    "\uffc5\063\uffc5\001\002\000\006\052\uffc3\062\uffc3\001\002" +
    "\000\006\052\uffc2\062\uffc2\001\002\000\006\052\uffc4\062" +
    "\uffc4\001\002\000\010\020\231\052\uffca\062\uffca\001\002" +
    "\000\024\005\173\014\127\060\126\064\074\065\107\066" +
    "\066\067\121\070\124\071\122\001\002\000\006\052\uffc9" +
    "\062\uffc9\001\002\000\006\034\uffc6\063\uffc6\001\002\000" +
    "\006\052\uffc1\062\uffc1\001\002\000\006\052\uff83\062\033" +
    "\001\002\000\006\037\237\047\240\001\002\000\006\052" +
    "\uff81\062\uff81\001\002\000\006\052\uff82\062\uff82\001\002" +
    "\000\014\004\244\060\126\067\121\070\124\071\122\001" +
    "\002\000\010\013\246\032\245\061\247\001\002\000\010" +
    "\013\uffce\032\uffce\061\uffce\001\002\000\010\013\uffcf\032" +
    "\uffcf\061\uffcf\001\002\000\014\004\244\060\126\067\121" +
    "\070\124\071\122\001\002\000\014\004\244\060\126\067" +
    "\121\070\124\071\122\001\002\000\006\052\uffcc\062\uffcc" +
    "\001\002\000\010\013\uffd1\032\uffd1\061\uffd1\001\002\000" +
    "\010\013\uffd0\032\uffd0\061\uffd0\001\002\000\006\052\uffbf" +
    "\062\uffbf\001\002\000\036\003\072\006\060\007\070\033" +
    "\075\037\051\040\061\045\077\047\056\053\050\062\032" +
    "\064\074\065\107\066\066\071\057\001\002\000\036\003" +
    "\072\006\060\007\070\033\075\037\051\040\061\045\077" +
    "\047\056\053\050\062\033\064\074\065\107\066\066\071" +
    "\057\001\002\000\010\035\uffaa\051\uffaa\052\uffaa\001\002" +
    "\000\036\003\072\006\060\007\070\033\075\037\051\040" +
    "\061\045\077\047\056\053\050\062\033\064\074\065\107" +
    "\066\066\071\057\001\002\000\006\052\uffae\062\uffae\001" +
    "\002\000\010\035\uffab\051\uffab\052\uffab\001\002\000\004" +
    "\046\262\001\002\000\004\071\263\001\002\000\006\052" +
    "\uffb4\062\uffb4\001\002\000\004\042\265\001\002\000\006" +
    "\037\266\041\270\001\002\000\020\005\uffb6\014\uffb6\027" +
    "\uffb6\060\uffb6\067\uffb6\070\uffb6\071\uffb6\001\002\000\020" +
    "\005\301\014\127\027\277\060\126\067\121\070\124\071" +
    "\122\001\002\000\020\005\uffb7\014\uffb7\027\uffb7\060\uffb7" +
    "\067\uffb7\070\uffb7\071\uffb7\001\002\000\006\052\uffb8\062" +
    "\uffb8\001\002\000\012\031\325\050\uffda\052\uffda\062\uffda" +
    "\001\002\000\044\013\133\014\136\015\140\016\137\017" +
    "\135\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\050\uffdc\052\uffdc\061\uffdc\062\uffdc\001" +
    "\002\000\014\030\uffd2\031\uffd2\050\uffd2\052\uffd2\062\uffd2" +
    "\001\002\000\014\030\uffd4\031\uffd4\050\uffd4\052\uffd4\062" +
    "\uffd4\001\002\000\016\020\310\022\311\023\312\024\314" +
    "\025\313\026\315\001\002\000\004\060\305\001\002\000" +
    "\014\030\302\031\uffd6\050\uffd6\052\uffd6\062\uffd6\001\002" +
    "\000\032\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\050\uffdb\052\uffdb\061\uffdb\062\uffdb" +
    "\001\002\000\020\005\uffd9\014\uffd9\027\uffd9\060\uffd9\067" +
    "\uffd9\070\uffd9\071\uffd9\001\002\000\020\005\301\014\127" +
    "\027\277\060\126\067\121\070\124\071\122\001\002\000" +
    "\014\030\302\031\uffd5\050\uffd5\052\uffd5\062\uffd5\001\002" +
    "\000\016\005\301\014\127\060\126\067\121\070\124\071" +
    "\122\001\002\000\004\061\307\001\002\000\014\030\uffd3" +
    "\031\uffd3\050\uffd3\052\uffd3\062\uffd3\001\002\000\016\005" +
    "\301\014\127\060\126\067\121\070\124\071\122\001\002" +
    "\000\016\005\301\014\127\060\126\067\121\070\124\071" +
    "\122\001\002\000\016\005\301\014\127\060\126\067\121" +
    "\070\124\071\122\001\002\000\016\005\301\014\127\060" +
    "\126\067\121\070\124\071\122\001\002\000\016\005\301" +
    "\014\127\060\126\067\121\070\124\071\122\001\002\000" +
    "\016\005\301\014\127\060\126\067\121\070\124\071\122" +
    "\001\002\000\016\030\uffdd\031\uffdd\050\uffdd\052\uffdd\061" +
    "\uffdd\062\uffdd\001\002\000\016\030\uffde\031\uffde\050\uffde" +
    "\052\uffde\061\uffde\062\uffde\001\002\000\016\030\uffdf\031" +
    "\uffdf\050\uffdf\052\uffdf\061\uffdf\062\uffdf\001\002\000\016" +
    "\030\uffe0\031\uffe0\050\uffe0\052\uffe0\061\uffe0\062\uffe0\001" +
    "\002\000\016\030\uffe1\031\uffe1\050\uffe1\052\uffe1\061\uffe1" +
    "\062\uffe1\001\002\000\016\030\uffe2\031\uffe2\050\uffe2\052" +
    "\uffe2\061\uffe2\062\uffe2\001\002\000\020\005\301\014\127" +
    "\027\277\060\126\067\121\070\124\071\122\001\002\000" +
    "\020\005\uffd8\014\uffd8\027\uffd8\060\uffd8\067\uffd8\070\uffd8" +
    "\071\uffd8\001\002\000\012\031\325\050\uffd7\052\uffd7\062" +
    "\uffd7\001\002\000\036\003\uffb9\006\uffb9\007\uffb9\033\uffb9" +
    "\037\uffb9\040\uffb9\045\uffb9\047\uffb9\053\uffb9\062\033\064" +
    "\uffb9\065\uffb9\066\uffb9\071\uffb9\001\002\000\014\004\244" +
    "\060\126\067\121\070\124\071\122\001\002\000\010\013" +
    "\246\032\245\061\332\001\002\000\006\052\uffcd\062\uffcd" +
    "\001\002\000\006\050\uffa7\062\uffa7\001\002\000\004\062" +
    "\032\001\002\000\036\003\uffbb\006\uffbb\007\uffbb\033\uffbb" +
    "\037\uffbb\040\uffbb\045\uffbb\047\uffbb\053\uffbb\062\033\064" +
    "\uffbb\065\uffbb\066\uffbb\071\uffbb\001\002\000\034\003\072" +
    "\006\060\007\070\033\075\037\051\040\061\045\077\047" +
    "\056\053\050\064\074\065\107\066\066\071\057\001\002" +
    "\000\036\003\uffa8\006\uffa8\007\uffa8\033\uffa8\037\uffa8\040" +
    "\uffa8\045\uffa8\047\uffa8\053\uffa8\062\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\071\uffa8\001\002\000\006\052\uffaf\062\uffaf\001" +
    "\002\000\006\052\uffad\062\uffad\001\002\000\004\035\343" +
    "\001\002\000\004\037\344\001\002\000\006\052\uffba\062" +
    "\uffba\001\002\000\014\014\127\060\126\067\121\070\124" +
    "\071\122\001\002\000\016\013\133\014\136\015\140\016" +
    "\137\017\135\062\032\001\002\000\006\054\uff9f\062\033" +
    "\001\002\000\020\005\301\014\127\027\277\060\126\067" +
    "\121\070\124\071\122\001\002\000\010\035\uffa0\051\350" +
    "\052\uffa0\001\002\000\006\035\363\052\337\001\002\000" +
    "\006\050\354\062\032\001\002\000\004\062\032\001\002" +
    "\000\036\003\072\006\060\007\070\033\075\037\051\040" +
    "\061\045\077\047\056\053\050\062\033\064\074\065\107" +
    "\066\066\071\057\001\002\000\010\035\uffa3\051\uffa3\052" +
    "\uffa3\001\002\000\036\003\072\006\060\007\070\033\075" +
    "\037\051\040\061\045\077\047\056\053\050\062\033\064" +
    "\074\065\107\066\066\071\057\001\002\000\010\035\uffa4" +
    "\051\uffa4\052\uffa4\001\002\000\004\062\032\001\002\000" +
    "\004\035\365\001\002\000\004\047\364\001\002\000\006" +
    "\052\uffa5\062\uffa5\001\002\000\004\047\366\001\002\000" +
    "\006\052\uffa6\062\uffa6\001\002\000\036\003\072\006\060" +
    "\007\070\033\075\037\051\040\061\045\077\047\056\053" +
    "\050\062\033\064\074\065\107\066\066\071\057\001\002" +
    "\000\004\035\uffa9\001\002\000\006\035\uffa1\052\uffa1\001" +
    "\002\000\006\050\uffa2\062\uffa2\001\002\000\004\035\374" +
    "\001\002\000\004\057\375\001\002\000\006\002\uff93\062" +
    "\uff93\001\002\000\006\002\ufffb\062\ufffb\001\002\000\004" +
    "\056\u0100\001\002\000\006\002\ufffa\062\ufffa\001\002\000" +
    "\004\060\u0102\001\002\000\006\061\uff90\071\021\001\002" +
    "\000\004\061\u0104\001\002\000\004\062\032\001\002\000" +
    "\036\003\uff94\006\uff94\007\uff94\033\uff94\037\uff94\040\uff94" +
    "\045\uff94\047\uff94\053\uff94\062\033\064\uff94\065\uff94\066" +
    "\uff94\071\uff94\001\002\000\004\002\001\001\002\000\016" +
    "\002\ufff7\003\012\055\005\056\016\057\011\062\033\001" +
    "\002\000\006\002\ufff8\062\ufff8\001\002\000\006\002\ufffd" +
    "\062\ufffd\001\002\000\006\002\ufffc\062\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\020\002\006\004\013\005\005\066\007\072" +
    "\003\074\012\075\014\001\001\000\002\001\001\000\012" +
    "\066\u0108\072\u0109\074\012\075\014\001\001\000\004\003" +
    "\u0106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\016\054\017\062\020" +
    "\100\023\104\030\070\031\063\032\066\033\051\034\053" +
    "\036\061\040\072\043\064\045\101\046\052\050\046\052" +
    "\077\055\075\056\105\063\103\064\372\001\001\000\002" +
    "\001\001\000\052\016\054\017\062\020\100\023\104\030" +
    "\070\031\063\032\066\033\051\034\053\036\061\040\072" +
    "\043\064\045\101\046\052\050\046\052\077\055\075\056" +
    "\105\063\103\064\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\025\001\001" +
    "\000\002\001\001\000\004\003\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\034\001\001\000\004\077" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\045\001\001" +
    "\000\002\001\001\000\010\044\352\053\350\054\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\016\054" +
    "\017\062\020\100\023\104\030\070\031\063\032\066\033" +
    "\051\034\053\036\061\040\072\043\064\045\101\046\052" +
    "\050\046\052\077\055\075\056\105\063\103\064\341\001" +
    "\001\000\006\047\337\073\335\001\001\000\022\011\272" +
    "\012\273\013\275\025\333\065\127\067\271\070\274\071" +
    "\277\001\001\000\002\001\001\000\022\011\272\012\273" +
    "\013\275\025\332\065\127\067\271\070\274\071\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\326" +
    "\001\001\000\002\001\001\000\052\016\054\017\062\020" +
    "\100\023\104\030\070\031\063\032\066\033\051\034\053" +
    "\036\061\040\072\043\064\045\101\046\052\050\046\052" +
    "\077\055\075\056\105\063\103\064\263\001\001\000\052" +
    "\016\054\017\062\020\100\023\104\030\070\031\063\032" +
    "\066\033\051\034\053\036\061\040\072\043\064\045\101" +
    "\046\052\050\046\052\077\055\075\056\105\063\103\064" +
    "\260\001\001\000\004\003\253\001\001\000\004\035\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\234\001\001\000\002\001\001\000\004" +
    "\035\233\001\001\000\006\021\212\023\213\001\001\000" +
    "\002\001\001\000\004\041\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\164\001" +
    "\001\000\004\003\161\001\001\000\002\001\001\000\010" +
    "\015\114\060\115\061\116\001\001\000\004\035\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\016\054\017" +
    "\062\020\100\023\104\030\070\031\063\032\066\033\051" +
    "\034\053\036\061\040\072\043\064\045\101\046\052\050" +
    "\046\052\077\055\075\056\105\063\103\064\160\001\001" +
    "\000\010\015\114\057\150\061\146\001\001\000\002\001" +
    "\001\000\010\011\124\062\122\065\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\131\065\127" +
    "\001\001\000\004\065\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\144\065\127" +
    "\001\001\000\002\001\001\000\006\011\143\065\127\001" +
    "\001\000\006\011\142\065\127\001\001\000\006\011\141" +
    "\065\127\001\001\000\006\011\140\065\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\124" +
    "\062\122\065\127\001\001\000\004\003\153\001\001\000" +
    "\052\016\054\017\062\020\100\023\104\030\070\031\063" +
    "\032\066\033\051\034\053\036\061\040\072\043\064\045" +
    "\101\046\052\050\046\052\077\055\075\056\105\063\103" +
    "\064\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\016\054\017\062\020\100\023\104\030\070\031\063\032" +
    "\066\033\051\034\053\036\061\040\072\043\064\045\101" +
    "\046\052\050\046\052\077\055\075\056\105\063\103\064" +
    "\162\001\001\000\002\001\001\000\010\007\170\011\171" +
    "\065\127\001\001\000\004\003\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\176\065\127\001\001\000\004" +
    "\042\200\001\001\000\006\011\202\065\127\001\001\000" +
    "\004\003\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\206\001\001\000\006\011\205\065\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\210" +
    "\065\127\001\001\000\002\001\001\000\004\022\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\227\001\001\000\014\007\224\011\171\024\226\030\225" +
    "\065\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\224\011\171\024" +
    "\231\030\225\065\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\241" +
    "\065\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\250\065\242\001\001\000\006" +
    "\014\247\065\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\255" +
    "\016\054\017\062\020\100\023\104\030\070\031\063\032" +
    "\066\033\051\034\053\036\061\040\072\043\064\045\101" +
    "\046\052\050\046\052\077\055\075\056\105\063\256\001" +
    "\001\000\052\016\054\017\062\020\100\023\104\030\070" +
    "\031\063\032\066\033\051\034\053\036\061\040\072\043" +
    "\064\045\101\046\052\050\046\052\077\055\075\056\105" +
    "\063\103\064\254\001\001\000\002\001\001\000\052\016" +
    "\054\017\062\020\100\023\104\030\070\031\063\032\066" +
    "\033\051\034\053\036\061\040\072\043\064\045\101\046" +
    "\052\050\046\052\077\055\075\056\105\063\103\064\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\266\001\001\000\002\001\001\000\022\011" +
    "\272\012\273\013\275\025\270\065\127\067\271\070\274" +
    "\071\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\272\012\273\013\275\065\127\070\274\071" +
    "\303\001\001\000\004\026\302\001\001\000\012\011\272" +
    "\012\305\013\275\065\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\272\013\322\065\127\001\001" +
    "\000\010\011\272\013\321\065\127\001\001\000\010\011" +
    "\272\013\320\065\127\001\001\000\010\011\272\013\317" +
    "\065\127\001\001\000\010\011\272\013\316\065\127\001" +
    "\001\000\010\011\272\013\315\065\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\272" +
    "\012\273\013\275\065\127\067\325\070\274\071\277\001" +
    "\001\000\002\001\001\000\004\027\323\001\001\000\002" +
    "\001\001\000\006\014\330\065\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\334" +
    "\001\001\000\002\001\001\000\050\016\054\017\062\020" +
    "\100\023\104\030\070\031\063\032\066\033\051\034\053" +
    "\036\061\040\072\043\064\045\101\046\052\050\046\052" +
    "\077\055\075\056\105\063\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\345\065\127" +
    "\001\001\000\004\003\346\001\001\000\002\001\001\000" +
    "\022\011\272\012\273\013\275\025\371\065\127\067\271" +
    "\070\274\071\277\001\001\000\010\044\352\053\350\054" +
    "\370\001\001\000\006\051\361\073\360\001\001\000\004" +
    "\003\354\001\001\000\004\003\356\001\001\000\052\016" +
    "\054\017\062\020\100\023\104\030\070\031\063\032\066" +
    "\033\051\034\053\036\061\040\072\043\064\045\101\046" +
    "\052\050\046\052\077\055\075\056\105\063\103\064\355" +
    "\001\001\000\002\001\001\000\052\016\054\017\062\020" +
    "\100\023\104\030\070\031\063\032\066\033\051\034\053" +
    "\036\061\040\072\043\064\045\101\046\052\050\046\052" +
    "\077\055\075\056\105\063\103\064\357\001\001\000\002" +
    "\001\001\000\004\003\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\016\054\017\062\020\100\023\104\030" +
    "\070\031\063\032\066\033\051\034\053\036\061\040\072" +
    "\043\064\045\101\046\052\050\046\052\077\055\075\056" +
    "\105\063\103\064\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u0102\001" +
    "\001\000\002\001\001\000\004\003\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\u0107\066\007\072" +
    "\003\074\012\075\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoVisualBasic$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoVisualBasic$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoVisualBasic$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ManejadorSintacticoVB_PY msVB_PY = ManejadorSintacticoVB_PY.getInstacia();
    public ManejadorInstancias mi = ManejadorInstancias.getInstance();
    public ManejadorCuartetos mc = ManejadorCuartetos.getInstancia();
    public boolean and = false;
    private FrameCTDOA frameCTDOA;

    public SintacticoVisualBasic(LexicoVisualBasic lexer) { 
        super(lexer);   
        msVB_PY.setContadorLineas(0);
        msVB_PY.nuevoAnalisis();
    }

    public void setFrameCTDOA(FrameCTDOA frameCTDOA) {
        this.frameCTDOA = frameCTDOA;
        this.msVB_PY.setFrameCTDOA(frameCTDOA);
    }

    public void setAccion(String tipo, String mensaje, String accion){
        frameCTDOA.addErrores("ERROR Lexico Tipo: " + tipo + "\t Mensaje: " + mensaje + "\tAcción: ERROR\n");
    }

    @Override
    public void syntax_error(Symbol s){
        try {
            frameCTDOA.addErrores(
                    "\nError de Sintaxis: " 
                    + "\n\tLinea #:\t\t\t\t\t<< " + (s.right + 1) + " >>"
                    + "\n\tColumna #\t\t\t\t\t<< " + (s.left + 1) + " >>"
                    + "\n\tToken NO Reconocido:\t\t\t\t<< " + (s.value) + " >>" );
        } catch (Exception e) {
            System.out.println("Error " + e.toString());
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoVisualBasic$actions {
  private final SintacticoVisualBasic parser;

  /** Constructor */
  CUP$SintacticoVisualBasic$actions(SintacticoVisualBasic parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoVisualBasic$do_action(
    int                        CUP$SintacticoVisualBasic$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoVisualBasic$parser,
    java.util.Stack            CUP$SintacticoVisualBasic$stack,
    int                        CUP$SintacticoVisualBasic$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoVisualBasic$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoVisualBasic$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // estructuras_p ::= estructuras saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // estructuras_p ::= estructuras saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.retornarEstructuras(e, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras_p",50, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // estructuras ::= error END WHILE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // estructuras ::= error END IF 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // estructuras ::= error saltos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // estructuras ::= switch 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // estructuras ::= if_else_mult 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // estructuras ::= if_linea 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // estructuras ::= for 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // estructuras ::= do_while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // estructuras ::= while 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // estructuras ::= asignacion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.asignacionVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // estructuras ::= declaracion_variables 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // estructuras ::= solicitud_datos 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // estructuras ::= mensaje_terminal 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructuras",49, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // parametros_p ::= parametros_p COMA ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametros_p ::= COMA ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros_p",61, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametros ::= 
            {
              Object RESULT =null;
		RESULT = new ArrayList<>();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parametros ::= ID AS tipo_dato parametros_p 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        Simbolo s = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, i, ileft, iright);
        List<Simbolo> lista = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                lista.add((Simbolo) a);
            } else {
                lista = ((List<Simbolo>) a);
            }
        }   
        if (s != null) {
            lista.add(s);
        } RESULT = lista;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parametros ::= ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableParametro((Tipo) e, a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("parametros",60, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sub ::= sub_s estructuras_p END SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.metodos(((Procedimiento) e).getE(), a, ((Procedimiento) e).getU(), eleft, eright); parser.mc.finProcedimiento(false);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub",56, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sub_s ::= SUB ID PARENTESIS_A parametros PARENTESIS_C saltos 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.mc.addCuartetoProcedimiento(2, i, "VB", e, null); RESULT = new Procedimiento(i, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("sub_s",58, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // function ::= function_s estructuras_p return saltos END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		RESULT = parser.msVB_PY.funcion(((Procedimiento) e).getE(), ((Procedimiento) e).getA(), i, o, ((Procedimiento) e).getU(), oleft, oright); parser.mc.finProcedimiento(false);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function",52, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function_s ::= FUNCTION ID PARENTESIS_A parametros PARENTESIS_C AS tipo_dato saltos 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.addCuartetoProcedimiento(2, u, "VB", e, (Tipo) a); RESULT = new Procedimiento(u, e, (Tipo) a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("function_s",59, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // casos ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("casos",48, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // caso ::= case_p estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.crearEstructuraCases(a, e, aleft, aright, false);
        parser.mc.finCadaCaso();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso",47, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // case_p ::= CASE casos saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.condicional((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("case_p",11, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cantidad_casos ::= caso 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cantidad_casos ::= cantidad_casos caso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(a != null) {
            if(a instanceof Simbolo) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) a);
                if(e != null) {
                    agregar.add((Simbolo) e);
                } RESULT = agregar;
            } else {
                ((List<Simbolo>) a).add(((Simbolo) e));
            }
        } else {
            if(e != null) {
                List<Simbolo> agregar = new ArrayList<>();  
                agregar.add((Simbolo) e);
                RESULT = agregar;
            }
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("cantidad_casos",46, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // caso_else ::= CASE ELSE saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        parser.mc.etiquetaGoto();
        RESULT = parser.msVB_PY.crearEstructuraCases(null, a, aleft, aright, true);
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("caso_else",45, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // switch ::= switch_p cantidad_casos caso_else END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, i, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // switch ::= switch_p cantidad_casos END SELECT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.crearCase(e, null, a, eleft, eright);
        parser.mc.etqFinTurno();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch",43, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // switch_p ::= SELECT CASE operaciones_aritmeticas saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.setEtiquetaSwitch((Simbolo) a); RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("switch_p",44, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // else_if_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // else_if_p ::= elseif else_if_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                listaSimbolos = (List<Simbolo>) a;
            }
        }
        if(e != null) {
            listaSimbolos.add((Simbolo) e);
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_if_p",42, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ie ::= ELSEIF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ie",34, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // elseif ::= ie saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // elseif ::= ie THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 2); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("elseif",41, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // if_else_mult ::= if_m else_if_p END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",40, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // if_else_mult ::= if_m else_if_p else_m END IF 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, e, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_else_mult",40, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ii ::= IF condicional 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ii",33, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ee ::= ELSE 
            {
              Object RESULT =null;
		parser.mc.escribirEtiquetasInicio(false); parser.mc.escribirEtiquetaFin(); parser.mc.nuevoAnalisisBoolean();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("ee",57, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // else_m ::= ee saltos estructuras_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("else_m",39, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // if_m ::= ii saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",38, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // if_m ::= ii THEN saltos estructuras_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, e, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_m",38, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // if_linea_p ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",37, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // if_linea_p ::= ee estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(a, false, 3); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea_p",37, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // if_line ::= ii THEN estructuras 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.crearEstructuraCondicional(e, a, 1); parser.mc.imprimirResto();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_line",36, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // if_linea ::= if_line if_linea_p 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.construirCondicionalIf(a, null, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("if_linea",35, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // var ::= ID AS tipo_dato IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, (Tipo) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",31, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // var ::= ID IGUAL operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarAsignacionFor(i, a, aleft, aright, null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("var",31, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // step ::= 
            {
              Object RESULT =null;
		RESULT = null;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // step ::= STEP operaciones_aritmeticas 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, i);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("step",32, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for ::= for_p estructuras_p NEXT ID 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(((For) x).getA() != null && ((For) x).getE() != null && ((For) x).getI() != null) {
            if(parser.msVB_PY.comprobarIdFor(((For) x).getA(), u.toString(), uleft, uright)) {
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, true, 3);
            } else  {   
                RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
            } 
        } else {
            RESULT = parser.msVB_PY.contruirEstructuraCiloDW(o, null, 3);
        } 
        parser.mc.finFor(((For) x).getLista());
        parser.mc.imprimirResto();
        parser.msVB_PY.removerCualquierSimbolo(((For) x).getA());
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // for_p ::= FOR var TO operaciones_aritmeticas step saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new For(a, e, i, parser.mc.addFor((Simbolo) a, (Simbolo) e, (Simbolo) i));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("for_p",23, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // until_while ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",29, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // until_while ::= UNTIL 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("until_while",29, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // do_while ::= do_while_p estructuras_p LOOP until_while condicional 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, a, 2);
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        parser.mc.finDoWhile((String) i);
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while",28, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // do_while_p ::= DO saltos 
            {
              Object RESULT =null;
		
        RESULT = parser.mc.addDoWhile();
        parser.mc.nuevoAnalisisBoolean();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("do_while_p",13, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // while ::= while_p estructuras_p END WHILE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		
        RESULT = parser.msVB_PY.contruirEstructuraCiloDW(e, ((While) a).getA(), 1);
        parser.mc.finWhile(((While) a).getIdEtiqueta());
        parser.mc.imprimirResto();
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // while_p ::= while_n condicional saltos 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 
        parser.mc.nuevoAnalisisBoolean();
        parser.mc.escribirEtiquetasInicio(false);
        parser.mc.escribirEtiquetaFin();
        ((While) w).setA(a); 
        RESULT = w;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_p",25, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // while_n ::= WHILE 
            {
              Object RESULT =null;
		RESULT = new While(parser.mc.addWhile(), null);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("while_n",26, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // p_parentesis ::= PARENTESIS_A PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // p_parentesis ::= PARENTESIS_A CADENA PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimir(new Simbolo(null, e ));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("p_parentesis",27, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // solicitud_datos ::= CINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, '\b', 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // solicitud_datos ::= FINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, 0, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // solicitud_datos ::= IINPUT p_parentesis 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, 0, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("solicitud_datos",22, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // asignacion ::= solicitud_datos 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // asignacion ::= return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion_variables ::= ID IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        if(e != null) {
            RESULT = new Simbolo(((Simbolo) e).getTipo(), ((Simbolo) e), a);
        } else { 
            RESULT = e;
        }
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("asignacion_variables",17, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_id_p ::= lista_id_p COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_id_p ::= COMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(null, null, a);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_id_p",16, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_ids ::= ID lista_id_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		
        List<Simbolo> listaSimbolos = new ArrayList<>();
        if(a != null) {
            if(a instanceof Simbolo) {
                listaSimbolos.add((Simbolo) a);
            } else {
                    listaSimbolos = (List<Simbolo>) a;
            }
        }
        if (e != null) {
            listaSimbolos.add(new Simbolo(null, null, e));
        }
        RESULT = listaSimbolos;
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("lista_ids",15, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion_variables ::= DIM asignacion_variables 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion_variables ::= DIM ID AS tipo_dato IGUAL asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariableAsignacion((Tipo) e, i, a, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaracion_variables ::= DIM ID AS tipo_dato 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declaraUnaVariable(new Simbolo((Tipo) e, null, a), aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaracion_variables ::= DIM lista_ids AS tipo_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.declararVariasVariables((List<Simbolo>) e, (Tipo) a, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("declaracion_variables",14, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mensaje_terminal ::= CONSOLA_LINEA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.imprimirNuevaLinea(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // mensaje_terminal ::= CONSOLA PARENTESIS_A concatenacion PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("mensaje_terminal",12, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // concatenacion ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimir((Simbolo) e); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // concatenacion ::= CADENA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.imprimir(new Simbolo(null, "\"" + e + "\"")); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // concatenacion ::= concatenacion AMPERSAND concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // concatenacion ::= concatenacion MAS concatenacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.msVB_PY.concatencacion(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("concatenacion",10, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicional_not ::= operaciones_logicas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.gotoEscribir(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicional_not ::= NOT PARENTESIS_A operaciones_logicas PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.mc.gotoEscribir(); RESULT = parser.msVB_PY.comprobacionCondicional(a, true, 3, aleft, aright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_not",54, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicional_and ::= condicional_not 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicional_and ::= condicional_and and condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_and",55, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicional_or ::= condicional_and 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicional_or ::= condicional_or or condicional_or 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobacionCondicional(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional_or",53, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // or ::= OR 
            {
              Object RESULT =null;
		parser.mc.or(); parser.mc.condicionalOR(); if (!parser.mc.ultimoAgregadorEtiqueta()) {parser.mc.escribirEtiqueta();}
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("or",21, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // and ::= AND 
            {
              Object RESULT =null;
		parser.mc.and(); parser.mc.condicionalAND(); parser.mc.escribirEtiqueta();
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("and",20, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicional ::= condicional_or 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mc.nuevoAnalisisBoolean(); RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("condicional",19, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipos_comparacion ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipos_comparacion ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipos_comparacion",9, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operaciones_logicas ::= tipos_comparacion MAYOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 6, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operaciones_logicas ::= tipos_comparacion MAYOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 5, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operaciones_logicas ::= tipos_comparacion MENOR_IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 4, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operaciones_logicas ::= tipos_comparacion MENOR tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 3, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operaciones_logicas ::= tipos_comparacion DISTINTO tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 2, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operaciones_logicas ::= tipos_comparacion IGUAL tipos_comparacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.comprobarOperacionesLogicas(a, e, 1, cleft, cright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_logicas",8, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // estruct ::= REAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		float e = (float)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.FLOAT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // estruct ::= NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.INT_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // estruct ::= ID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.metodoBuscarID(e.toString(), eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // estruct ::= PARENTESIS_A operaciones_aritmeticas PARENTESIS_C 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estruct",51, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operaciones_aritmeticas ::= estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operaciones_aritmeticas ::= MENOS estruct 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.modificarVariables(e, eleft, eright);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operaciones_aritmeticas ::= operaciones_aritmeticas MODULO operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 5);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operaciones_aritmeticas ::= operaciones_aritmeticas DIV operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 4);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operaciones_aritmeticas ::= operaciones_aritmeticas POR operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 3);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operaciones_aritmeticas ::= operaciones_aritmeticas MENOS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 2);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operaciones_aritmeticas ::= operaciones_aritmeticas MAS operaciones_aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = parser.msVB_PY.realizarOperaciones(a, e, aleft, aright, eleft, eright, 1);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("operaciones_aritmeticas",7, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;
		RESULT = Constantes.CHAR_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= DECIMAL 
            {
              Object RESULT =null;
		RESULT = Constantes.FLOAT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= INTEGER 
            {
              Object RESULT =null;
		RESULT = Constantes.INT_VAR_VB_PY;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("tipo_dato",6, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // return_dato ::= operaciones_aritmeticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // return_dato ::= CARACTER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = new Simbolo(Constantes.CHAR_VAR_VB_PY, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return_dato",5, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // return ::= RETURN return_dato 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 
        if(e != null) {
            parser.mc.returnCuarteto((Simbolo) e);
            RESULT = new Simbolo(Constantes.RETURN_VAR, e);
        } else {
            RESULT = null;
        }    
    
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // saltos ::= saltos SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // saltos ::= SALTO 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("saltos",1, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructura_fs_p ::= 
            {
              Object RESULT =null;

              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructura_fs_p ::= estructura_fs_p saltos 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		 RESULT = a;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // estructura_fs_p ::= estructura_fs_p saltos estructura_fs 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = parser.msVB_PY.lista(a, e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // estructura_fs_p ::= estructura_fs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		 RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs_p",3, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructura_fs ::= error END FUNCTION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructura_fs ::= error SUB 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		parser.syntax_error((Symbol) e);
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estructura_fs ::= PUBLIC sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estructura_fs ::= PUBLIC function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estructura_fs ::= sub 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estructura_fs ::= function 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("estructura_fs",2, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= estructura_fs_p 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.peek()).value;
		parser.mi.setClaseVB(parser.msVB_PY.claseVB(e));
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          return CUP$SintacticoVisualBasic$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoVisualBasic$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.elementAt(CUP$SintacticoVisualBasic$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoVisualBasic$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoVisualBasic$parser.done_parsing();
          return CUP$SintacticoVisualBasic$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

