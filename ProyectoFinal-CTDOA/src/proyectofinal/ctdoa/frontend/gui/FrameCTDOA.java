/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectofinal.ctdoa.frontend.gui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import proyectofinal.ctdoa.backend.analizador.c.LexicoC;
import proyectofinal.ctdoa.backend.analizador.c.SintacticoC;
import proyectofinal.ctdoa.backend.manejadores.ManejadorCuartetos;
import proyectofinal.ctdoa.backend.manejadores.ManejadorSintacticoJP;
import proyectofinal.ctdoa.backend.objetos.Pestaña;

/**
 *
 * @author bryangmz
 */
public class FrameCTDOA extends javax.swing.JFrame {

    /* Area de Variables */
    private Pestaña pestañaActual;
    private final List<Pestaña> pestañas;
    
    /* Area de Constantes */
    private static final FileNameExtensionFilter EXTENSION_MLG = new FileNameExtensionFilter("Archivos que almacenan el Código Fuente. (.mlg)", "mlg");
    private static final FileNameExtensionFilter EXTENSION_CPP = new FileNameExtensionFilter("Archivos que almacenan Código en Tres direcciones o Código Optimizado. (.cpp)", "cpp");
    private static final FileNameExtensionFilter EXTENSION_ASM = new FileNameExtensionFilter("Archivos que almacenan Código Assembler. (.asm)", "asm");
    private ManejadorSintacticoJP jP;
    
    /**
     * Creates new form FrameCTDOA
     */
    public FrameCTDOA() {
        initComponents();
        this.pestañas = new ArrayList<>();
        this.jP = ManejadorSintacticoJP.getInstacia();
        this.agregarPestanias();
        this.setLocationRelativeTo(null);
    }

    public void setPestañaActual(Pestaña pestañaActual) {
        if (pestañaActual != null) {
            this.lblSeleccionado.setText("Seleccionado: " + pestañaActual.getNombre());
        }
        this.pestañaActual = pestañaActual;
    }

    public JLabel getLblCursor() {
        return lblCursor;
    }

    public void setLblPestaniaSelect(String name) {
        this.lblPestaniaSeleccionada.setText("Pestaña Actual: " + name);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        panelConPestanias = new javax.swing.JTabbedPane();
        lblCursor = new javax.swing.JLabel();
        lblSeleccionado = new javax.swing.JLabel();
        lblPestaniaSeleccionada = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textErrores = new javax.swing.JTextArea();
        lblSeleccionado1 = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuAbrir = new javax.swing.JMenuItem();
        menuNuevo = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuGuardarComo = new javax.swing.JMenuItem();
        menuSalir = new javax.swing.JMenuItem();
        menuGenerarCodigo = new javax.swing.JMenu();
        codigoTresDirecciones = new javax.swing.JMenuItem();
        codigoOptimizado = new javax.swing.JMenuItem();
        codigoAsembler = new javax.swing.JMenuItem();
        menuEjecutar = new javax.swing.JMenu();
        ejecutarTresDirecciones = new javax.swing.JMenuItem();
        ejecutarOptimizado = new javax.swing.JMenuItem();
        ejecutarAssembler = new javax.swing.JMenuItem();

        jScrollPane1.setViewportView(jTextPane1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CTDOA");

        lblCursor.setText("Linea: 1 - Columna: 1");

        lblSeleccionado.setText("Seleccionado:");

        lblPestaniaSeleccionada.setText("Pestaña Actual: ");

        textErrores.setEditable(false);
        textErrores.setColumns(20);
        textErrores.setRows(5);
        jScrollPane2.setViewportView(textErrores);

        lblSeleccionado1.setText("ERRORES");

        menuArchivo.setText("Archivo");

        menuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        menuAbrir.setText("Abrir");
        menuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuAbrir);

        menuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuNuevo.setText("Nuevo");
        menuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuNuevo);

        menuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        menuGuardar.setText("Guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardar);

        menuGuardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        menuGuardarComo.setText("Guardar Como");
        menuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(menuGuardarComo);

        menuSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuSalir.setText("Salir");
        menuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(menuSalir);

        menu.add(menuArchivo);

        menuGenerarCodigo.setText("Generar Codigo");

        codigoTresDirecciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        codigoTresDirecciones.setText("Tres Direcciones");
        codigoTresDirecciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoTresDireccionesActionPerformed(evt);
            }
        });
        menuGenerarCodigo.add(codigoTresDirecciones);

        codigoOptimizado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        codigoOptimizado.setText("Optimizado");
        menuGenerarCodigo.add(codigoOptimizado);

        codigoAsembler.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        codigoAsembler.setText("Assembler");
        menuGenerarCodigo.add(codigoAsembler);

        menu.add(menuGenerarCodigo);

        menuEjecutar.setText("Ejecutar");

        ejecutarTresDirecciones.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        ejecutarTresDirecciones.setText("Tres Direcciones");
        menuEjecutar.add(ejecutarTresDirecciones);

        ejecutarOptimizado.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK));
        ejecutarOptimizado.setText("Optimizado");
        menuEjecutar.add(ejecutarOptimizado);

        ejecutarAssembler.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        ejecutarAssembler.setText("Assembler");
        menuEjecutar.add(ejecutarAssembler);

        menu.add(menuEjecutar);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelConPestanias, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSeleccionado, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPestaniaSeleccionada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                        .addComponent(lblCursor))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSeleccionado1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCursor)
                    .addComponent(lblSeleccionado)
                    .addComponent(lblPestaniaSeleccionada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelConPestanias, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSeleccionado1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAbrirActionPerformed
        // TODO add your handling code here:
        int opcion;
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(EXTENSION_MLG);
        opcion = chooser.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            try {
                String docIde = "";
                File archivo = chooser.getSelectedFile();
                FileReader entrada;
                entrada = new FileReader(archivo);
                int e;
                while ((e = entrada.read()) != -1) {
                    char caracter = (char) e;
                    docIde += caracter;
                }
                entrada.close();
                pestañas.get(0).getTextArea().setText(docIde);
                pestañas.get(0).setNombre(archivo.getName());
                pestañas.get(0).setPath(archivo.getPath());
                lblSeleccionado.setText("Seleccionado: " + pestañas.get(0).getNombre());
                JOptionPane.showMessageDialog(this, "Agregado");
            } catch (IOException ex) {
                System.out.println("Error en carga archivo .len");
            }
        }
    }//GEN-LAST:event_menuAbrirActionPerformed

    private void menuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNuevoActionPerformed
        // TODO add your handling code here:
        pestañaActual = pestañas.get(0);
        lblPestaniaSeleccionada.setText("Pestaña: " + pestañaActual.getTitulo());
        if (pestañaActual.getPath() == null) {
            guardarCambios(pestañaActual);
        }
        pestañaActual.setNombre("Documento");
        pestañaActual.getTextArea().setText("//Add Code");
    }//GEN-LAST:event_menuNuevoActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        // TODO add your handling code here:
        guardarCambios(pestañaActual);
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void menuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarComoActionPerformed
        // TODO add your handling code here:
        if (pestañaActual != null) {
            if (!pestañaActual.getTitulo().equalsIgnoreCase("Errores")) {
                int opcion;
                JFileChooser chooser = new JFileChooser();
                opcion = chooser.showSaveDialog(this);
                if (opcion == JFileChooser.APPROVE_OPTION) {
                    try {
                        File archivo = chooser.getSelectedFile();
                        pestañaActual.setPath(archivo.getPath() + pathPestania());
                        pestañaActual.setNombre(archivo.getName());
                        guardar(pestañaActual.getPath(), pestañaActual.getTextArea().getText());
                        JOptionPane.showMessageDialog(this, "Guardado: <<Pestaña: " + pestañaActual.getTitulo() + ">>");
                    } catch (IOException ex) {
                        System.out.println("Error en carga archivo");
                    }
                }
            }
        }
    }//GEN-LAST:event_menuGuardarComoActionPerformed

    private void menuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalirActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Gracias por utilizar esta aplicacion.");
    }//GEN-LAST:event_menuSalirActionPerformed

    private void codigoTresDireccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoTresDireccionesActionPerformed
        // TODO add your handling code here:
        if(pestañaActual != null) {
            if (pestañaActual.getTitulo().equalsIgnoreCase("Programa")) {
                try {
                    if (!pestañaActual.getTextArea().getText().isEmpty()) {
                        textErrores.setText("");
                        ManejadorCuartetos cuartetos =  ManejadorCuartetos.getInstancia();
                        cuartetos.nuevoAnalisis();
                        LexicoC lexicoC = new LexicoC(new StringReader(pestañaActual.getTextArea().getText()));
                        SintacticoC sintacticoC = new SintacticoC(lexicoC);
                        sintacticoC.setFrameCTDOA(this);
                        sintacticoC.parse();
                        if (!textErrores.getText().isEmpty()) {
                            JOptionPane.showMessageDialog(null, "Errores en el analisis de la entrada, se a construido el codigo tres direcciones con lo que se a leido.", "ERROR", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Analisis, realizado con exito. Ve a la pestaña Codigo Tres Direcciones.");
                            pestañas.get(1).getTextArea().setText(cuartetos.print());
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se a seleccionado ningun archivo.", "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
                        JOptionPane.showMessageDialog(null, "Debes de clickear el editor de texto.", "INFORMACION", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Errores en el analisis de la entrada, se a construido el codigo tres direcciones con lo que se a leido.", "ERROR", JOptionPane.ERROR_MESSAGE);
                }   
            }
        }
    }//GEN-LAST:event_codigoTresDireccionesActionPerformed

    public void addErrores(String error){
        if (textErrores.getText().isEmpty()) {
            textErrores.setText(error + "\n");
        } else {
            textErrores.setText(textErrores.getText() + error + "\n");
        }   
    }
    
    /* Metodo que guarda los cambios realizados en la pestania seleccionada */
    private void guardarCambios(Pestaña pestaña){
        if (pestaña != null) {
            if (pestaña.getPath() != null && pestaña.getPath().isEmpty()) {
                if (!pestaña.getTitulo().equalsIgnoreCase("Errores")) {
                    int opcion;
                    JFileChooser chooser = new JFileChooser();
                    opcion = chooser.showSaveDialog(this);
                        if (opcion == JFileChooser.APPROVE_OPTION) {
                        try {
                            File archivo = chooser.getSelectedFile();
                            if (pestaña.getPath() == null || pestaña.getPath().isEmpty()) {
                                pestaña.setPath(archivo.getPath() + "/" + archivo.getName() + pathPestania());
                            }
                            guardar(pestaña.getPath(), pestaña.getTextArea().getText());
                            JOptionPane.showMessageDialog(this, "Guardado: <<Pestaña: " + pestaña.getTitulo() + ">>");
                        } catch (IOException ex) {
                            System.out.println("Error en carga archivo");
                        }
                    }
                } 
            } else {
                try {
                    guardar(pestaña.getPath(), pestaña.getTextArea().getText());
                    JOptionPane.showMessageDialog(this, "Guardado: <<Pestaña: " + pestaña.getTitulo() + ">>");
                } catch (IOException ex) {
                    System.out.println("ERROR");
                }
            }
        }
    }

    /* Metodo que regresa el par de ina pestania */
    private String pathPestania(){
        switch (pestañaActual.getTitulo()) {
            case "Programa":
                return ".mlg";
            case "Codigo Tres Direcciones":
                return ".cpp";
            case "Optimizacion":
                return ".cpp";
            case "Assembler":
                return ".asm";
            default:
                return "";
        }
    }
    
    /* Metodo que genera un archivo: Si Pestania 0 -> mlg si 1 o 2 .cpp sino asm */
    private void guardar(String path, String textoSalida) throws IOException{
        System.out.println(path);
        File chooser = new File(path);
        try (FileOutputStream salida = new FileOutputStream(chooser)) {
            byte[] byteTxt = textoSalida.getBytes();
            salida.write(byteTxt);
        } catch (FileNotFoundException ex) {
            System.out.println("No existe el archivo");
        }
    }
    
    /* Metodo que agrega las pestanias: Programa, Codigo tres direcciones, Optimizacion, Assembler, Errores */
    private void agregarPestanias(){
        this.jP.setFrameCTDOA(this);
        this.agregarPestaña("Programa", "", "");
        this.agregarPestaña("Codigo Tres Direcciones", "", "");
        this.agregarPestaña("Optimizacion", "", "");
        this.agregarPestaña("Assembler", "", "");
    }
    
    /* Metodo para agregar una nueva pestania. */
    private void agregarPestaña(String titulo, String path, String txt){
        JTextArea textArea = new JTextArea();
        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.setTabSize(1);
        JScrollPane panelConScroll = new JScrollPane();
        panelConScroll.setViewportView(textArea);   
        Pestaña pestaña = new Pestaña("", textArea, panelConScroll, path, this, titulo);
        pestaña.setEstaPestaña(pestaña);
        pestaña.getTextArea().setText(txt);
        panelConPestanias.addTab(titulo, pestaña.getScrollPane());
        pestañas.add(pestaña);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem codigoAsembler;
    private javax.swing.JMenuItem codigoOptimizado;
    private javax.swing.JMenuItem codigoTresDirecciones;
    private javax.swing.JMenuItem ejecutarAssembler;
    private javax.swing.JMenuItem ejecutarOptimizado;
    private javax.swing.JMenuItem ejecutarTresDirecciones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblCursor;
    private javax.swing.JLabel lblPestaniaSeleccionada;
    private javax.swing.JLabel lblSeleccionado;
    private javax.swing.JLabel lblSeleccionado1;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenuItem menuAbrir;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEjecutar;
    private javax.swing.JMenu menuGenerarCodigo;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuGuardarComo;
    private javax.swing.JMenuItem menuNuevo;
    private javax.swing.JMenuItem menuSalir;
    private javax.swing.JTabbedPane panelConPestanias;
    private javax.swing.JTextArea textErrores;
    // End of variables declaration//GEN-END:variables
}
